# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off
from __future__ import annotations

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template actions.py.jinja --
from typing import TypeVar
import warnings

from . import types, errors, bases
from ._compat import model_parse
from ._constants import CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED

if TYPE_CHECKING:
    from .client import Prisma
    from .bases import _PrismaModel


_PrismaModelT = TypeVar('_PrismaModelT', bound='_PrismaModel')


class TrechoActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.Trecho]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = Trecho.prisma().query_raw(
            'SELECT * FROM Trecho WHERE id = $1',
            1103527590,
        )
        ```
        """
        return self._client.query_raw(query, *args, model=self._model)

    def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.Trecho
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = Trecho.prisma().query_first(
            'SELECT * FROM Trecho WHERE origem = $1',
            'dhheabfhf',
        )
        ```
        """
        return self._client.query_first(query, *args, model=self._model)

    def create(
        self,
        data: types.TrechoCreateInput,
        include: Optional[types.TrechoInclude] = None
    ) -> _PrismaModelT:
        """Create a new Trecho record.

        Parameters
        ----------
        data
            Trecho record data
        include
            Specifies which relations should be loaded on the returned Trecho model

        Returns
        -------
        prisma.models.Trecho
            The created Trecho record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Trecho record from just the required fields
        trecho = Trecho.prisma().create(
            data={
                # data to create a Trecho record
                'origem': 'ggciceaie',
                'destino': 'bbehjachib',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    def create_many(
        self,
        data: List[types.TrechoCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple Trecho records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Trecho record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = Trecho.prisma().create_many(
            data=[
                {
                    # data to create a Trecho record
                    'origem': 'cadfabfehe',
                    'destino': 'dgiiaaijj',
                },
                {
                    # data to create a Trecho record
                    'origem': 'bfaiacjjfc',
                    'destino': 'eigcfgbif',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    def delete(
        self,
        where: types.TrechoWhereUniqueInput,
        include: Optional[types.TrechoInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single Trecho record.

        Parameters
        ----------
        where
            Trecho filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Trecho model

        Returns
        -------
        prisma.models.Trecho
            The deleted Trecho record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        trecho = Trecho.prisma().delete(
            where={
                'id': 1062517886,
            },
        )
        ```
        """
        try:
            resp = self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    def find_unique(
        self,
        where: types.TrechoWhereUniqueInput,
        include: Optional[types.TrechoInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique Trecho record.

        Parameters
        ----------
        where
            Trecho filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Trecho model

        Returns
        -------
        prisma.models.Trecho
            The found Trecho record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        trecho = Trecho.prisma().find_unique(
            where={
                'id': 267834847,
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    def find_unique_or_raise(
        self,
        where: types.TrechoWhereUniqueInput,
        include: Optional[types.TrechoInclude] = None
    ) -> _PrismaModelT:
        """Find a unique Trecho record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            Trecho filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Trecho model

        Returns
        -------
        prisma.models.Trecho
            The found Trecho record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        trecho = Trecho.prisma().find_unique_or_raise(
            where={
                'id': 180171308,
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.TrechoWhereInput] = None,
        cursor: Optional[types.TrechoWhereUniqueInput] = None,
        include: Optional[types.TrechoInclude] = None,
        order: Optional[Union[types.TrechoOrderByInput, List[types.TrechoOrderByInput]]] = None,
        distinct: Optional[List[types.TrechoScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple Trecho records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Trecho records returned
        skip
            Ignore the first N results
        where
            Trecho filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Trecho model
        order
            Order the returned Trecho records by any field
        distinct
            Filter Trecho records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.Trecho]
            The list of all Trecho records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Trecho records
        trechos = Trecho.prisma().find_many(take=10)

        # find the first 5 Trecho records ordered by the destino field
        trechos = Trecho.prisma().find_many(
            take=5,
            order={
                'destino': 'desc',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.TrechoWhereInput] = None,
        cursor: Optional[types.TrechoWhereUniqueInput] = None,
        include: Optional[types.TrechoInclude] = None,
        order: Optional[Union[types.TrechoOrderByInput, List[types.TrechoOrderByInput]]] = None,
        distinct: Optional[List[types.TrechoScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single Trecho record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Trecho filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Trecho model
        order
            Order the returned Trecho records by any field
        distinct
            Filter Trecho records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Trecho
            The first Trecho record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Trecho record ordered by the id field
        trecho = Trecho.prisma().find_first(
            skip=1,
            order={
                'id': 'desc',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.TrechoWhereInput] = None,
        cursor: Optional[types.TrechoWhereUniqueInput] = None,
        include: Optional[types.TrechoInclude] = None,
        order: Optional[Union[types.TrechoOrderByInput, List[types.TrechoOrderByInput]]] = None,
        distinct: Optional[List[types.TrechoScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single Trecho record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Trecho filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Trecho model
        order
            Order the returned Trecho records by any field
        distinct
            Filter Trecho records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Trecho
            The first Trecho record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Trecho record ordered by the origem field
        trecho = Trecho.prisma().find_first_or_raise(
            skip=1,
            order={
                'origem': 'desc',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    def update(
        self,
        data: types.TrechoUpdateInput,
        where: types.TrechoWhereUniqueInput,
        include: Optional[types.TrechoInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single Trecho record.

        Parameters
        ----------
        data
            Trecho record data specifying what to update
        where
            Trecho filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Trecho model

        Returns
        -------
        prisma.models.Trecho
            The updated Trecho record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        trecho = Trecho.prisma().update(
            where={
                'id': 836760821,
            },
            data={
                # data to update the Trecho record to
            },
        )
        ```
        """
        try:
            resp = self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    def upsert(
        self,
        where: types.TrechoWhereUniqueInput,
        data: types.TrechoUpsertInput,
        include: Optional[types.TrechoInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Trecho filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Trecho model

        Returns
        -------
        prisma.models.Trecho
            The created or updated Trecho record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        trecho = Trecho.prisma().upsert(
            where={
                'id': 595337866,
            },
            data={
                'create': {
                    'id': 595337866,
                    'origem': 'bfaiacjjfc',
                    'destino': 'eigcfgbif',
                },
                'update': {
                    'origem': 'bfaiacjjfc',
                    'destino': 'eigcfgbif',
                },
            },
        )
        ```
        """
        resp = self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    def update_many(
        self,
        data: types.TrechoUpdateManyMutationInput,
        where: types.TrechoWhereInput,
    ) -> int:
        """Update multiple Trecho records

        Parameters
        ----------
        data
            Trecho data to update the selected Trecho records to
        where
            Filter to select the Trecho records to update

        Returns
        -------
        int
            The total number of Trecho records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Trecho records
        total = Trecho.prisma().update_many(
            data={
                'destino': 'hjaecfifb'
            },
            where={}
        )
        ```
        """
        resp = self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.TrechoWhereInput] = None,
        cursor: Optional[types.TrechoWhereUniqueInput] = None,
    ) -> int:
        """Count the number of Trecho records present in the database

        Parameters
        ----------
        select
            Select the Trecho fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Trecho filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.TrechoCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = Trecho.prisma().count()

        # results: prisma.types.TrechoCountAggregateOutput
        results = Trecho.prisma().count(
            select={
                '_all': True,
                'id': True,
            },
        )
        ```
        """


    @overload
    def count(
        self,
        select: types.TrechoCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.TrechoWhereInput] = None,
        cursor: Optional[types.TrechoWhereUniqueInput] = None,
    ) -> types.TrechoCountAggregateOutput:
        ...

    def count(
        self,
        select: Optional[types.TrechoCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.TrechoWhereInput] = None,
        cursor: Optional[types.TrechoWhereUniqueInput] = None,
    ) -> Union[int, types.TrechoCountAggregateOutput]:
        """Count the number of Trecho records present in the database

        Parameters
        ----------
        select
            Select the Trecho fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Trecho filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.TrechoCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = Trecho.prisma().count()

        # results: prisma.types.TrechoCountAggregateOutput
        results = Trecho.prisma().count(
            select={
                '_all': True,
                'origem': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.TrechoCountAggregateOutput, resp['data']['result']['_count'])

    def delete_many(
        self,
        where: Optional[types.TrechoWhereInput] = None
    ) -> int:
        """Delete multiple Trecho records.

        Parameters
        ----------
        where
            Optional Trecho filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Trecho records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Trecho records
        total = Trecho.prisma().delete_many()
        ```
        """
        resp = self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    def group_by(
        self,
        by: List['types.TrechoScalarFieldKeys'],
        *,
        where: Optional['types.TrechoWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.TrechoAvgAggregateInput'] = None,
        sum: Optional['types.TrechoSumAggregateInput'] = None,
        min: Optional['types.TrechoMinAggregateInput'] = None,
        max: Optional['types.TrechoMaxAggregateInput'] = None,
        having: Optional['types.TrechoScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.TrechoCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.TrechoScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.TrechoScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.TrechoGroupByOutput']:
        """Group Trecho records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Trecho fields to group records by
        where
            Trecho filter to select records
        take
            Limit the maximum number of Trecho records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.TrechoGroupByOutput]
            A list of dictionaries representing the Trecho record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Trecho records by destino values
        # and count how many records are in each group
        results = Trecho.prisma().group_by(
            ['destino'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class AssentoActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.Assento]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = Assento.prisma().query_raw(
            'SELECT * FROM Assento WHERE id = $1',
            2111915288,
        )
        ```
        """
        return self._client.query_raw(query, *args, model=self._model)

    def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.Assento
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = Assento.prisma().query_first(
            'SELECT * FROM Assento WHERE numero = $1',
            1149758321,
        )
        ```
        """
        return self._client.query_first(query, *args, model=self._model)

    def create(
        self,
        data: types.AssentoCreateInput,
        include: Optional[types.AssentoInclude] = None
    ) -> _PrismaModelT:
        """Create a new Assento record.

        Parameters
        ----------
        data
            Assento record data
        include
            Specifies which relations should be loaded on the returned Assento model

        Returns
        -------
        prisma.models.Assento
            The created Assento record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Assento record from just the required fields
        assento = Assento.prisma().create(
            data={
                # data to create a Assento record
                'numero': 1644289366,
                'id_trecho': 1388290519,
            },
        )
        ```
        """
        resp = self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    def create_many(
        self,
        data: List[types.AssentoCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple Assento records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Assento record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = Assento.prisma().create_many(
            data=[
                {
                    # data to create a Assento record
                    'numero': 1647418052,
                    'id_trecho': 1675546029,
                },
                {
                    # data to create a Assento record
                    'numero': 1767274722,
                    'id_trecho': 326272115,
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    def delete(
        self,
        where: types.AssentoWhereUniqueInput,
        include: Optional[types.AssentoInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single Assento record.

        Parameters
        ----------
        where
            Assento filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Assento model

        Returns
        -------
        prisma.models.Assento
            The deleted Assento record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        assento = Assento.prisma().delete(
            where={
                'id': 1343201072,
            },
        )
        ```
        """
        try:
            resp = self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    def find_unique(
        self,
        where: types.AssentoWhereUniqueInput,
        include: Optional[types.AssentoInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique Assento record.

        Parameters
        ----------
        where
            Assento filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Assento model

        Returns
        -------
        prisma.models.Assento
            The found Assento record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        assento = Assento.prisma().find_unique(
            where={
                'id': 675780521,
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    def find_unique_or_raise(
        self,
        where: types.AssentoWhereUniqueInput,
        include: Optional[types.AssentoInclude] = None
    ) -> _PrismaModelT:
        """Find a unique Assento record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            Assento filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Assento model

        Returns
        -------
        prisma.models.Assento
            The found Assento record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        assento = Assento.prisma().find_unique_or_raise(
            where={
                'id': 744964398,
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.AssentoWhereInput] = None,
        cursor: Optional[types.AssentoWhereUniqueInput] = None,
        include: Optional[types.AssentoInclude] = None,
        order: Optional[Union[types.AssentoOrderByInput, List[types.AssentoOrderByInput]]] = None,
        distinct: Optional[List[types.AssentoScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple Assento records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Assento records returned
        skip
            Ignore the first N results
        where
            Assento filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Assento model
        order
            Order the returned Assento records by any field
        distinct
            Filter Assento records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.Assento]
            The list of all Assento records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Assento records
        assentos = Assento.prisma().find_many(take=10)

        # find the first 5 Assento records ordered by the id_trecho field
        assentos = Assento.prisma().find_many(
            take=5,
            order={
                'id_trecho': 'desc',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.AssentoWhereInput] = None,
        cursor: Optional[types.AssentoWhereUniqueInput] = None,
        include: Optional[types.AssentoInclude] = None,
        order: Optional[Union[types.AssentoOrderByInput, List[types.AssentoOrderByInput]]] = None,
        distinct: Optional[List[types.AssentoScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single Assento record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Assento filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Assento model
        order
            Order the returned Assento records by any field
        distinct
            Filter Assento records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Assento
            The first Assento record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Assento record ordered by the id field
        assento = Assento.prisma().find_first(
            skip=1,
            order={
                'id': 'desc',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.AssentoWhereInput] = None,
        cursor: Optional[types.AssentoWhereUniqueInput] = None,
        include: Optional[types.AssentoInclude] = None,
        order: Optional[Union[types.AssentoOrderByInput, List[types.AssentoOrderByInput]]] = None,
        distinct: Optional[List[types.AssentoScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single Assento record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Assento filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Assento model
        order
            Order the returned Assento records by any field
        distinct
            Filter Assento records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Assento
            The first Assento record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Assento record ordered by the numero field
        assento = Assento.prisma().find_first_or_raise(
            skip=1,
            order={
                'numero': 'desc',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    def update(
        self,
        data: types.AssentoUpdateInput,
        where: types.AssentoWhereUniqueInput,
        include: Optional[types.AssentoInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single Assento record.

        Parameters
        ----------
        data
            Assento record data specifying what to update
        where
            Assento filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Assento model

        Returns
        -------
        prisma.models.Assento
            The updated Assento record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        assento = Assento.prisma().update(
            where={
                'id': 1969681615,
            },
            data={
                # data to update the Assento record to
            },
        )
        ```
        """
        try:
            resp = self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    def upsert(
        self,
        where: types.AssentoWhereUniqueInput,
        data: types.AssentoUpsertInput,
        include: Optional[types.AssentoInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Assento filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Assento model

        Returns
        -------
        prisma.models.Assento
            The created or updated Assento record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        assento = Assento.prisma().upsert(
            where={
                'id': 1116175964,
            },
            data={
                'create': {
                    'id': 1116175964,
                    'numero': 1767274722,
                    'id_trecho': 326272115,
                },
                'update': {
                    'numero': 1767274722,
                    'id_trecho': 326272115,
                },
            },
        )
        ```
        """
        resp = self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    def update_many(
        self,
        data: types.AssentoUpdateManyMutationInput,
        where: types.AssentoWhereInput,
    ) -> int:
        """Update multiple Assento records

        Parameters
        ----------
        data
            Assento data to update the selected Assento records to
        where
            Filter to select the Assento records to update

        Returns
        -------
        int
            The total number of Assento records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Assento records
        total = Assento.prisma().update_many(
            data={
                'id_trecho': 861472101
            },
            where={}
        )
        ```
        """
        resp = self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.AssentoWhereInput] = None,
        cursor: Optional[types.AssentoWhereUniqueInput] = None,
    ) -> int:
        """Count the number of Assento records present in the database

        Parameters
        ----------
        select
            Select the Assento fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Assento filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.AssentoCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = Assento.prisma().count()

        # results: prisma.types.AssentoCountAggregateOutput
        results = Assento.prisma().count(
            select={
                '_all': True,
                'id': True,
            },
        )
        ```
        """


    @overload
    def count(
        self,
        select: types.AssentoCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.AssentoWhereInput] = None,
        cursor: Optional[types.AssentoWhereUniqueInput] = None,
    ) -> types.AssentoCountAggregateOutput:
        ...

    def count(
        self,
        select: Optional[types.AssentoCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.AssentoWhereInput] = None,
        cursor: Optional[types.AssentoWhereUniqueInput] = None,
    ) -> Union[int, types.AssentoCountAggregateOutput]:
        """Count the number of Assento records present in the database

        Parameters
        ----------
        select
            Select the Assento fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Assento filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.AssentoCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = Assento.prisma().count()

        # results: prisma.types.AssentoCountAggregateOutput
        results = Assento.prisma().count(
            select={
                '_all': True,
                'numero': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.AssentoCountAggregateOutput, resp['data']['result']['_count'])

    def delete_many(
        self,
        where: Optional[types.AssentoWhereInput] = None
    ) -> int:
        """Delete multiple Assento records.

        Parameters
        ----------
        where
            Optional Assento filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Assento records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Assento records
        total = Assento.prisma().delete_many()
        ```
        """
        resp = self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    def group_by(
        self,
        by: List['types.AssentoScalarFieldKeys'],
        *,
        where: Optional['types.AssentoWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.AssentoAvgAggregateInput'] = None,
        sum: Optional['types.AssentoSumAggregateInput'] = None,
        min: Optional['types.AssentoMinAggregateInput'] = None,
        max: Optional['types.AssentoMaxAggregateInput'] = None,
        having: Optional['types.AssentoScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.AssentoCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.AssentoScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.AssentoScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.AssentoGroupByOutput']:
        """Group Assento records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Assento fields to group records by
        where
            Assento filter to select records
        take
            Limit the maximum number of Assento records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.AssentoGroupByOutput]
            A list of dictionaries representing the Assento record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Assento records by id_trecho values
        # and count how many records are in each group
        results = Assento.prisma().group_by(
            ['id_trecho'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class TrechoReservadoActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.TrechoReservado]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = TrechoReservado.prisma().query_raw(
            'SELECT * FROM TrechoReservado WHERE id = $1',
            1303003706,
        )
        ```
        """
        return self._client.query_raw(query, *args, model=self._model)

    def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.TrechoReservado
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = TrechoReservado.prisma().query_first(
            'SELECT * FROM TrechoReservado WHERE uuid_passagem = $1',
            'bgiggdidbf',
        )
        ```
        """
        return self._client.query_first(query, *args, model=self._model)

    def create(
        self,
        data: types.TrechoReservadoCreateInput,
        include: Optional[types.TrechoReservadoInclude] = None
    ) -> _PrismaModelT:
        """Create a new TrechoReservado record.

        Parameters
        ----------
        data
            TrechoReservado record data
        include
            Specifies which relations should be loaded on the returned TrechoReservado model

        Returns
        -------
        prisma.models.TrechoReservado
            The created TrechoReservado record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a TrechoReservado record from just the required fields
        trechoreservado = TrechoReservado.prisma().create(
            data={
                # data to create a TrechoReservado record
                'uuid_passagem': 'caaaedabfc',
                'id_trecho': 1868141281,
                'id_assento': 1860847622,
            },
        )
        ```
        """
        resp = self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    def create_many(
        self,
        data: List[types.TrechoReservadoCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple TrechoReservado records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of TrechoReservado record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = TrechoReservado.prisma().create_many(
            data=[
                {
                    # data to create a TrechoReservado record
                    'uuid_passagem': 'beeifcbebf',
                    'id_trecho': 1628650740,
                    'id_assento': 1249606685,
                },
                {
                    # data to create a TrechoReservado record
                    'uuid_passagem': 'idfjadbcc',
                    'id_trecho': 763719779,
                    'id_assento': 429995104,
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    def delete(
        self,
        where: types.TrechoReservadoWhereUniqueInput,
        include: Optional[types.TrechoReservadoInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single TrechoReservado record.

        Parameters
        ----------
        where
            TrechoReservado filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned TrechoReservado model

        Returns
        -------
        prisma.models.TrechoReservado
            The deleted TrechoReservado record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        trechoreservado = TrechoReservado.prisma().delete(
            where={
                'id': 1775811865,
            },
        )
        ```
        """
        try:
            resp = self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    def find_unique(
        self,
        where: types.TrechoReservadoWhereUniqueInput,
        include: Optional[types.TrechoReservadoInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique TrechoReservado record.

        Parameters
        ----------
        where
            TrechoReservado filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned TrechoReservado model

        Returns
        -------
        prisma.models.TrechoReservado
            The found TrechoReservado record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        trechoreservado = TrechoReservado.prisma().find_unique(
            where={
                'id': 893145566,
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    def find_unique_or_raise(
        self,
        where: types.TrechoReservadoWhereUniqueInput,
        include: Optional[types.TrechoReservadoInclude] = None
    ) -> _PrismaModelT:
        """Find a unique TrechoReservado record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            TrechoReservado filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned TrechoReservado model

        Returns
        -------
        prisma.models.TrechoReservado
            The found TrechoReservado record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        trechoreservado = TrechoReservado.prisma().find_unique_or_raise(
            where={
                'id': 995405759,
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.TrechoReservadoWhereInput] = None,
        cursor: Optional[types.TrechoReservadoWhereUniqueInput] = None,
        include: Optional[types.TrechoReservadoInclude] = None,
        order: Optional[Union[types.TrechoReservadoOrderByInput, List[types.TrechoReservadoOrderByInput]]] = None,
        distinct: Optional[List[types.TrechoReservadoScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple TrechoReservado records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of TrechoReservado records returned
        skip
            Ignore the first N results
        where
            TrechoReservado filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned TrechoReservado model
        order
            Order the returned TrechoReservado records by any field
        distinct
            Filter TrechoReservado records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.TrechoReservado]
            The list of all TrechoReservado records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 TrechoReservado records
        trechoreservados = TrechoReservado.prisma().find_many(take=10)

        # find the first 5 TrechoReservado records ordered by the id_trecho field
        trechoreservados = TrechoReservado.prisma().find_many(
            take=5,
            order={
                'id_trecho': 'desc',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.TrechoReservadoWhereInput] = None,
        cursor: Optional[types.TrechoReservadoWhereUniqueInput] = None,
        include: Optional[types.TrechoReservadoInclude] = None,
        order: Optional[Union[types.TrechoReservadoOrderByInput, List[types.TrechoReservadoOrderByInput]]] = None,
        distinct: Optional[List[types.TrechoReservadoScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single TrechoReservado record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            TrechoReservado filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned TrechoReservado model
        order
            Order the returned TrechoReservado records by any field
        distinct
            Filter TrechoReservado records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.TrechoReservado
            The first TrechoReservado record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second TrechoReservado record ordered by the id_assento field
        trechoreservado = TrechoReservado.prisma().find_first(
            skip=1,
            order={
                'id_assento': 'desc',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.TrechoReservadoWhereInput] = None,
        cursor: Optional[types.TrechoReservadoWhereUniqueInput] = None,
        include: Optional[types.TrechoReservadoInclude] = None,
        order: Optional[Union[types.TrechoReservadoOrderByInput, List[types.TrechoReservadoOrderByInput]]] = None,
        distinct: Optional[List[types.TrechoReservadoScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single TrechoReservado record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            TrechoReservado filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned TrechoReservado model
        order
            Order the returned TrechoReservado records by any field
        distinct
            Filter TrechoReservado records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.TrechoReservado
            The first TrechoReservado record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second TrechoReservado record ordered by the id field
        trechoreservado = TrechoReservado.prisma().find_first_or_raise(
            skip=1,
            order={
                'id': 'desc',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    def update(
        self,
        data: types.TrechoReservadoUpdateInput,
        where: types.TrechoReservadoWhereUniqueInput,
        include: Optional[types.TrechoReservadoInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single TrechoReservado record.

        Parameters
        ----------
        data
            TrechoReservado record data specifying what to update
        where
            TrechoReservado filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned TrechoReservado model

        Returns
        -------
        prisma.models.TrechoReservado
            The updated TrechoReservado record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        trechoreservado = TrechoReservado.prisma().update(
            where={
                'id': 2102736524,
            },
            data={
                # data to update the TrechoReservado record to
            },
        )
        ```
        """
        try:
            resp = self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    def upsert(
        self,
        where: types.TrechoReservadoWhereUniqueInput,
        data: types.TrechoReservadoUpsertInput,
        include: Optional[types.TrechoReservadoInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            TrechoReservado filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned TrechoReservado model

        Returns
        -------
        prisma.models.TrechoReservado
            The created or updated TrechoReservado record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        trechoreservado = TrechoReservado.prisma().upsert(
            where={
                'id': 271520213,
            },
            data={
                'create': {
                    'id': 271520213,
                    'uuid_passagem': 'idfjadbcc',
                    'id_trecho': 763719779,
                    'id_assento': 429995104,
                },
                'update': {
                    'uuid_passagem': 'idfjadbcc',
                    'id_trecho': 763719779,
                    'id_assento': 429995104,
                },
            },
        )
        ```
        """
        resp = self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    def update_many(
        self,
        data: types.TrechoReservadoUpdateManyMutationInput,
        where: types.TrechoReservadoWhereInput,
    ) -> int:
        """Update multiple TrechoReservado records

        Parameters
        ----------
        data
            TrechoReservado data to update the selected TrechoReservado records to
        where
            Filter to select the TrechoReservado records to update

        Returns
        -------
        int
            The total number of TrechoReservado records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all TrechoReservado records
        total = TrechoReservado.prisma().update_many(
            data={
                'uuid_passagem': 'efggddide'
            },
            where={}
        )
        ```
        """
        resp = self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.TrechoReservadoWhereInput] = None,
        cursor: Optional[types.TrechoReservadoWhereUniqueInput] = None,
    ) -> int:
        """Count the number of TrechoReservado records present in the database

        Parameters
        ----------
        select
            Select the TrechoReservado fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            TrechoReservado filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.TrechoReservadoCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = TrechoReservado.prisma().count()

        # results: prisma.types.TrechoReservadoCountAggregateOutput
        results = TrechoReservado.prisma().count(
            select={
                '_all': True,
                'id_trecho': True,
            },
        )
        ```
        """


    @overload
    def count(
        self,
        select: types.TrechoReservadoCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.TrechoReservadoWhereInput] = None,
        cursor: Optional[types.TrechoReservadoWhereUniqueInput] = None,
    ) -> types.TrechoReservadoCountAggregateOutput:
        ...

    def count(
        self,
        select: Optional[types.TrechoReservadoCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.TrechoReservadoWhereInput] = None,
        cursor: Optional[types.TrechoReservadoWhereUniqueInput] = None,
    ) -> Union[int, types.TrechoReservadoCountAggregateOutput]:
        """Count the number of TrechoReservado records present in the database

        Parameters
        ----------
        select
            Select the TrechoReservado fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            TrechoReservado filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.TrechoReservadoCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = TrechoReservado.prisma().count()

        # results: prisma.types.TrechoReservadoCountAggregateOutput
        results = TrechoReservado.prisma().count(
            select={
                '_all': True,
                'id_assento': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.TrechoReservadoCountAggregateOutput, resp['data']['result']['_count'])

    def delete_many(
        self,
        where: Optional[types.TrechoReservadoWhereInput] = None
    ) -> int:
        """Delete multiple TrechoReservado records.

        Parameters
        ----------
        where
            Optional TrechoReservado filter to find the records to be deleted

        Returns
        -------
        int
            The total number of TrechoReservado records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all TrechoReservado records
        total = TrechoReservado.prisma().delete_many()
        ```
        """
        resp = self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    def group_by(
        self,
        by: List['types.TrechoReservadoScalarFieldKeys'],
        *,
        where: Optional['types.TrechoReservadoWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.TrechoReservadoAvgAggregateInput'] = None,
        sum: Optional['types.TrechoReservadoSumAggregateInput'] = None,
        min: Optional['types.TrechoReservadoMinAggregateInput'] = None,
        max: Optional['types.TrechoReservadoMaxAggregateInput'] = None,
        having: Optional['types.TrechoReservadoScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.TrechoReservadoCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.TrechoReservadoScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.TrechoReservadoScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.TrechoReservadoGroupByOutput']:
        """Group TrechoReservado records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar TrechoReservado fields to group records by
        where
            TrechoReservado filter to select records
        take
            Limit the maximum number of TrechoReservado records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.TrechoReservadoGroupByOutput]
            A list of dictionaries representing the TrechoReservado record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group TrechoReservado records by id values
        # and count how many records are in each group
        results = TrechoReservado.prisma().group_by(
            ['id'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class PassagemActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.Passagem]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = Passagem.prisma().query_raw(
            'SELECT * FROM Passagem WHERE uuid = $1',
            'caficfigfb',
        )
        ```
        """
        return self._client.query_raw(query, *args, model=self._model)

    def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.Passagem
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = Passagem.prisma().query_first(
            'SELECT * FROM Passagem WHERE user_id = $1',
            1583689592,
        )
        ```
        """
        return self._client.query_first(query, *args, model=self._model)

    def create(
        self,
        data: types.PassagemCreateInput,
        include: Optional[types.PassagemInclude] = None
    ) -> _PrismaModelT:
        """Create a new Passagem record.

        Parameters
        ----------
        data
            Passagem record data
        include
            Specifies which relations should be loaded on the returned Passagem model

        Returns
        -------
        prisma.models.Passagem
            The created Passagem record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Passagem record from just the required fields
        passagem = Passagem.prisma().create(
            data={
                # data to create a Passagem record
                'user_id': 878442065,
            },
        )
        ```
        """
        resp = self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    def create_many(
        self,
        data: List[types.PassagemCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple Passagem records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Passagem record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = Passagem.prisma().create_many(
            data=[
                {
                    # data to create a Passagem record
                    'user_id': 1675280054,
                },
                {
                    # data to create a Passagem record
                    'user_id': 1627576247,
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    def delete(
        self,
        where: types.PassagemWhereUniqueInput,
        include: Optional[types.PassagemInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single Passagem record.

        Parameters
        ----------
        where
            Passagem filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Passagem model

        Returns
        -------
        prisma.models.Passagem
            The deleted Passagem record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        passagem = Passagem.prisma().delete(
            where={
                'uuid': 'cafeiaccbc',
            },
        )
        ```
        """
        try:
            resp = self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    def find_unique(
        self,
        where: types.PassagemWhereUniqueInput,
        include: Optional[types.PassagemInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique Passagem record.

        Parameters
        ----------
        where
            Passagem filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Passagem model

        Returns
        -------
        prisma.models.Passagem
            The found Passagem record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        passagem = Passagem.prisma().find_unique(
            where={
                'uuid': 'gaddfhfh',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    def find_unique_or_raise(
        self,
        where: types.PassagemWhereUniqueInput,
        include: Optional[types.PassagemInclude] = None
    ) -> _PrismaModelT:
        """Find a unique Passagem record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            Passagem filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Passagem model

        Returns
        -------
        prisma.models.Passagem
            The found Passagem record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        passagem = Passagem.prisma().find_unique_or_raise(
            where={
                'uuid': 'gieegcbeg',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.PassagemWhereInput] = None,
        cursor: Optional[types.PassagemWhereUniqueInput] = None,
        include: Optional[types.PassagemInclude] = None,
        order: Optional[Union[types.PassagemOrderByInput, List[types.PassagemOrderByInput]]] = None,
        distinct: Optional[List[types.PassagemScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple Passagem records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Passagem records returned
        skip
            Ignore the first N results
        where
            Passagem filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Passagem model
        order
            Order the returned Passagem records by any field
        distinct
            Filter Passagem records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.Passagem]
            The list of all Passagem records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Passagem records
        passagems = Passagem.prisma().find_many(take=10)

        # find the first 5 Passagem records ordered by the created_at field
        passagems = Passagem.prisma().find_many(
            take=5,
            order={
                'created_at': 'desc',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.PassagemWhereInput] = None,
        cursor: Optional[types.PassagemWhereUniqueInput] = None,
        include: Optional[types.PassagemInclude] = None,
        order: Optional[Union[types.PassagemOrderByInput, List[types.PassagemOrderByInput]]] = None,
        distinct: Optional[List[types.PassagemScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single Passagem record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Passagem filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Passagem model
        order
            Order the returned Passagem records by any field
        distinct
            Filter Passagem records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Passagem
            The first Passagem record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Passagem record ordered by the uuid field
        passagem = Passagem.prisma().find_first(
            skip=1,
            order={
                'uuid': 'desc',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.PassagemWhereInput] = None,
        cursor: Optional[types.PassagemWhereUniqueInput] = None,
        include: Optional[types.PassagemInclude] = None,
        order: Optional[Union[types.PassagemOrderByInput, List[types.PassagemOrderByInput]]] = None,
        distinct: Optional[List[types.PassagemScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single Passagem record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Passagem filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Passagem model
        order
            Order the returned Passagem records by any field
        distinct
            Filter Passagem records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Passagem
            The first Passagem record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Passagem record ordered by the user_id field
        passagem = Passagem.prisma().find_first_or_raise(
            skip=1,
            order={
                'user_id': 'desc',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    def update(
        self,
        data: types.PassagemUpdateInput,
        where: types.PassagemWhereUniqueInput,
        include: Optional[types.PassagemInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single Passagem record.

        Parameters
        ----------
        data
            Passagem record data specifying what to update
        where
            Passagem filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Passagem model

        Returns
        -------
        prisma.models.Passagem
            The updated Passagem record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        passagem = Passagem.prisma().update(
            where={
                'uuid': 'bgcffadich',
            },
            data={
                # data to update the Passagem record to
            },
        )
        ```
        """
        try:
            resp = self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    def upsert(
        self,
        where: types.PassagemWhereUniqueInput,
        data: types.PassagemUpsertInput,
        include: Optional[types.PassagemInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Passagem filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Passagem model

        Returns
        -------
        prisma.models.Passagem
            The created or updated Passagem record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        passagem = Passagem.prisma().upsert(
            where={
                'uuid': 'fcbichhci',
            },
            data={
                'create': {
                    'uuid': 'fcbichhci',
                    'user_id': 1627576247,
                },
                'update': {
                    'user_id': 1627576247,
                },
            },
        )
        ```
        """
        resp = self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    def update_many(
        self,
        data: types.PassagemUpdateManyMutationInput,
        where: types.PassagemWhereInput,
    ) -> int:
        """Update multiple Passagem records

        Parameters
        ----------
        data
            Passagem data to update the selected Passagem records to
        where
            Filter to select the Passagem records to update

        Returns
        -------
        int
            The total number of Passagem records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Passagem records
        total = Passagem.prisma().update_many(
            data={
                'created_at': datetime.datetime.utcnow()
            },
            where={}
        )
        ```
        """
        resp = self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.PassagemWhereInput] = None,
        cursor: Optional[types.PassagemWhereUniqueInput] = None,
    ) -> int:
        """Count the number of Passagem records present in the database

        Parameters
        ----------
        select
            Select the Passagem fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Passagem filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.PassagemCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = Passagem.prisma().count()

        # results: prisma.types.PassagemCountAggregateOutput
        results = Passagem.prisma().count(
            select={
                '_all': True,
                'uuid': True,
            },
        )
        ```
        """


    @overload
    def count(
        self,
        select: types.PassagemCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.PassagemWhereInput] = None,
        cursor: Optional[types.PassagemWhereUniqueInput] = None,
    ) -> types.PassagemCountAggregateOutput:
        ...

    def count(
        self,
        select: Optional[types.PassagemCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.PassagemWhereInput] = None,
        cursor: Optional[types.PassagemWhereUniqueInput] = None,
    ) -> Union[int, types.PassagemCountAggregateOutput]:
        """Count the number of Passagem records present in the database

        Parameters
        ----------
        select
            Select the Passagem fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Passagem filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.PassagemCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = Passagem.prisma().count()

        # results: prisma.types.PassagemCountAggregateOutput
        results = Passagem.prisma().count(
            select={
                '_all': True,
                'user_id': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.PassagemCountAggregateOutput, resp['data']['result']['_count'])

    def delete_many(
        self,
        where: Optional[types.PassagemWhereInput] = None
    ) -> int:
        """Delete multiple Passagem records.

        Parameters
        ----------
        where
            Optional Passagem filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Passagem records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Passagem records
        total = Passagem.prisma().delete_many()
        ```
        """
        resp = self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    def group_by(
        self,
        by: List['types.PassagemScalarFieldKeys'],
        *,
        where: Optional['types.PassagemWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.PassagemAvgAggregateInput'] = None,
        sum: Optional['types.PassagemSumAggregateInput'] = None,
        min: Optional['types.PassagemMinAggregateInput'] = None,
        max: Optional['types.PassagemMaxAggregateInput'] = None,
        having: Optional['types.PassagemScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.PassagemCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.PassagemScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.PassagemScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.PassagemGroupByOutput']:
        """Group Passagem records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Passagem fields to group records by
        where
            Passagem filter to select records
        take
            Limit the maximum number of Passagem records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.PassagemGroupByOutput]
            A list of dictionaries representing the Passagem record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Passagem records by created_at values
        # and count how many records are in each group
        results = Passagem.prisma().group_by(
            ['created_at'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class UserActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.User]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = User.prisma().query_raw(
            'SELECT * FROM User WHERE id = $1',
            1266032265,
        )
        ```
        """
        return self._client.query_raw(query, *args, model=self._model)

    def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.User
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = User.prisma().query_first(
            'SELECT * FROM User WHERE login = $1',
            'jdcfdcgc',
        )
        ```
        """
        return self._client.query_first(query, *args, model=self._model)

    def create(
        self,
        data: types.UserCreateInput,
        include: Optional[types.UserInclude] = None
    ) -> _PrismaModelT:
        """Create a new User record.

        Parameters
        ----------
        data
            User record data
        include
            Specifies which relations should be loaded on the returned User model

        Returns
        -------
        prisma.models.User
            The created User record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a User record from just the required fields
        user = User.prisma().create(
            data={
                # data to create a User record
                'login': 'cafdaehjid',
                'password': 'gifdddbia',
                'name': 'bchehecef',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    def create_many(
        self,
        data: List[types.UserCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple User records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of User record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = User.prisma().create_many(
            data=[
                {
                    # data to create a User record
                    'login': 'jeijcbhfe',
                    'password': 'bjgejjabff',
                    'name': 'bcciijbibg',
                },
                {
                    # data to create a User record
                    'login': 'cffcachfd',
                    'password': 'bccdfhdigc',
                    'name': 'febcgjbfj',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if skip_duplicates and self._client._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._client._active_provider, 'create_many_skip_duplicates')

        resp = self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    def delete(
        self,
        where: types.UserWhereUniqueInput,
        include: Optional[types.UserInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single User record.

        Parameters
        ----------
        where
            User filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned User model

        Returns
        -------
        prisma.models.User
            The deleted User record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        user = User.prisma().delete(
            where={
                'id': 1064846676,
            },
        )
        ```
        """
        try:
            resp = self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    def find_unique(
        self,
        where: types.UserWhereUniqueInput,
        include: Optional[types.UserInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique User record.

        Parameters
        ----------
        where
            User filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned User model

        Returns
        -------
        prisma.models.User
            The found User record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        user = User.prisma().find_unique(
            where={
                'id': 508382461,
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    def find_unique_or_raise(
        self,
        where: types.UserWhereUniqueInput,
        include: Optional[types.UserInclude] = None
    ) -> _PrismaModelT:
        """Find a unique User record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            User filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned User model

        Returns
        -------
        prisma.models.User
            The found User record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        user = User.prisma().find_unique_or_raise(
            where={
                'id': 1024265714,
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.UserWhereInput] = None,
        cursor: Optional[types.UserWhereUniqueInput] = None,
        include: Optional[types.UserInclude] = None,
        order: Optional[Union[types.UserOrderByInput, List[types.UserOrderByInput]]] = None,
        distinct: Optional[List[types.UserScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple User records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of User records returned
        skip
            Ignore the first N results
        where
            User filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned User model
        order
            Order the returned User records by any field
        distinct
            Filter User records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.User]
            The list of all User records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 User records
        users = User.prisma().find_many(take=10)

        # find the first 5 User records ordered by the password field
        users = User.prisma().find_many(
            take=5,
            order={
                'password': 'desc',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.UserWhereInput] = None,
        cursor: Optional[types.UserWhereUniqueInput] = None,
        include: Optional[types.UserInclude] = None,
        order: Optional[Union[types.UserOrderByInput, List[types.UserOrderByInput]]] = None,
        distinct: Optional[List[types.UserScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single User record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            User filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned User model
        order
            Order the returned User records by any field
        distinct
            Filter User records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.User
            The first User record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second User record ordered by the name field
        user = User.prisma().find_first(
            skip=1,
            order={
                'name': 'desc',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.UserWhereInput] = None,
        cursor: Optional[types.UserWhereUniqueInput] = None,
        include: Optional[types.UserInclude] = None,
        order: Optional[Union[types.UserOrderByInput, List[types.UserOrderByInput]]] = None,
        distinct: Optional[List[types.UserScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single User record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            User filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned User model
        order
            Order the returned User records by any field
        distinct
            Filter User records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.User
            The first User record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second User record ordered by the id field
        user = User.prisma().find_first_or_raise(
            skip=1,
            order={
                'id': 'desc',
            },
        )
        ```
        """
        resp = self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    def update(
        self,
        data: types.UserUpdateInput,
        where: types.UserWhereUniqueInput,
        include: Optional[types.UserInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single User record.

        Parameters
        ----------
        data
            User record data specifying what to update
        where
            User filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned User model

        Returns
        -------
        prisma.models.User
            The updated User record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = User.prisma().update(
            where={
                'id': 872078403,
            },
            data={
                # data to update the User record to
            },
        )
        ```
        """
        try:
            resp = self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    def upsert(
        self,
        where: types.UserWhereUniqueInput,
        data: types.UserUpsertInput,
        include: Optional[types.UserInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            User filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned User model

        Returns
        -------
        prisma.models.User
            The created or updated User record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        user = User.prisma().upsert(
            where={
                'id': 1874748096,
            },
            data={
                'create': {
                    'id': 1874748096,
                    'login': 'cffcachfd',
                    'password': 'bccdfhdigc',
                    'name': 'febcgjbfj',
                },
                'update': {
                    'login': 'cffcachfd',
                    'password': 'bccdfhdigc',
                    'name': 'febcgjbfj',
                },
            },
        )
        ```
        """
        resp = self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    def update_many(
        self,
        data: types.UserUpdateManyMutationInput,
        where: types.UserWhereInput,
    ) -> int:
        """Update multiple User records

        Parameters
        ----------
        data
            User data to update the selected User records to
        where
            Filter to select the User records to update

        Returns
        -------
        int
            The total number of User records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all User records
        total = User.prisma().update_many(
            data={
                'login': 'jbgijghgb'
            },
            where={}
        )
        ```
        """
        resp = self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.UserWhereInput] = None,
        cursor: Optional[types.UserWhereUniqueInput] = None,
    ) -> int:
        """Count the number of User records present in the database

        Parameters
        ----------
        select
            Select the User fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            User filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.UserCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = User.prisma().count()

        # results: prisma.types.UserCountAggregateOutput
        results = User.prisma().count(
            select={
                '_all': True,
                'password': True,
            },
        )
        ```
        """


    @overload
    def count(
        self,
        select: types.UserCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.UserWhereInput] = None,
        cursor: Optional[types.UserWhereUniqueInput] = None,
    ) -> types.UserCountAggregateOutput:
        ...

    def count(
        self,
        select: Optional[types.UserCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.UserWhereInput] = None,
        cursor: Optional[types.UserWhereUniqueInput] = None,
    ) -> Union[int, types.UserCountAggregateOutput]:
        """Count the number of User records present in the database

        Parameters
        ----------
        select
            Select the User fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            User filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.UserCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = User.prisma().count()

        # results: prisma.types.UserCountAggregateOutput
        results = User.prisma().count(
            select={
                '_all': True,
                'name': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.UserCountAggregateOutput, resp['data']['result']['_count'])

    def delete_many(
        self,
        where: Optional[types.UserWhereInput] = None
    ) -> int:
        """Delete multiple User records.

        Parameters
        ----------
        where
            Optional User filter to find the records to be deleted

        Returns
        -------
        int
            The total number of User records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all User records
        total = User.prisma().delete_many()
        ```
        """
        resp = self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    def group_by(
        self,
        by: List['types.UserScalarFieldKeys'],
        *,
        where: Optional['types.UserWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.UserAvgAggregateInput'] = None,
        sum: Optional['types.UserSumAggregateInput'] = None,
        min: Optional['types.UserMinAggregateInput'] = None,
        max: Optional['types.UserMaxAggregateInput'] = None,
        having: Optional['types.UserScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.UserCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.UserScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.UserScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.UserGroupByOutput']:
        """Group User records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar User fields to group records by
        where
            User filter to select records
        take
            Limit the maximum number of User records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.UserGroupByOutput]
            A list of dictionaries representing the User record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group User records by id values
        # and count how many records are in each group
        results = User.prisma().group_by(
            ['id'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]



def _select_fields(root: str, select: Mapping[str, Any]) -> str:
    """Helper to build a GraphQL selection string

    This is a work around until field selection is added to the query builder.
    """

    return root + ' {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))


from . import models