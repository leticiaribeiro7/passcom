# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template types.py.jinja --
from typing import TypeVar

import httpx
from . import _types
from .utils import _NoneType



# TODO: filters with aggregates should have their own recursive fields
# TODO: cleanup whitespace control
# TODO: add an argument to signify that the last iteration should be skipped


SortMode = _types.SortMode
SortOrder = _types.SortOrder

MetricsFormat = _types.MetricsFormat

DatasourceOverride = _types.DatasourceOverride
HttpConfig = _types.HttpConfig


# types that can be serialized to json by our query builder
Serializable = Union[
    None,
    bool,
    float,
    int,
    str,
    datetime.datetime,
    List[Any],
    Dict[None, Any],
    Dict[bool, Any],
    Dict[float, Any],
    Dict[int, Any],
    Dict[str, Any],
]


    

StringFilter = TypedDict(
    'StringFilter',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive1'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive1 = TypedDict(
    'StringFilterRecursive1',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive2'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive2 = TypedDict(
    'StringFilterRecursive2',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive3'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive3 = TypedDict(
    'StringFilterRecursive3',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive4'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive4 = TypedDict(
    'StringFilterRecursive4',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
                'mode': SortMode,
        'search': str,
    },
    total=False,
)


class StringWithAggregatesFilter(StringFilter, total=False):
    _max: 'StringFilter'
    _min: 'StringFilter'
    _sum: 'StringFilter'
    _avg: 'StringFilter'
    _count: 'IntFilter'


    

DateTimeFilter = TypedDict(
    'DateTimeFilter',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive1'],
    },
    total=False,
)


DateTimeFilterRecursive1 = TypedDict(
    'DateTimeFilterRecursive1',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive2'],
    },
    total=False,
)


DateTimeFilterRecursive2 = TypedDict(
    'DateTimeFilterRecursive2',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive3'],
    },
    total=False,
)


DateTimeFilterRecursive3 = TypedDict(
    'DateTimeFilterRecursive3',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive4'],
    },
    total=False,
)


DateTimeFilterRecursive4 = TypedDict(
    'DateTimeFilterRecursive4',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
            },
    total=False,
)


class DateTimeWithAggregatesFilter(DateTimeFilter, total=False):
    _max: 'DateTimeFilter'
    _min: 'DateTimeFilter'
    _sum: 'DateTimeFilter'
    _avg: 'DateTimeFilter'
    _count: 'IntFilter'


    

BooleanFilter = TypedDict(
    'BooleanFilter',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive1'],
    },
    total=False,
)


BooleanFilterRecursive1 = TypedDict(
    'BooleanFilterRecursive1',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive2'],
    },
    total=False,
)


BooleanFilterRecursive2 = TypedDict(
    'BooleanFilterRecursive2',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive3'],
    },
    total=False,
)


BooleanFilterRecursive3 = TypedDict(
    'BooleanFilterRecursive3',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive4'],
    },
    total=False,
)


BooleanFilterRecursive4 = TypedDict(
    'BooleanFilterRecursive4',
    {
        'equals': bool,
            },
    total=False,
)


class BooleanWithAggregatesFilter(BooleanFilter, total=False):
    _max: 'BooleanFilter'
    _min: 'BooleanFilter'
    _sum: 'BooleanFilter'
    _avg: 'BooleanFilter'
    _count: 'IntFilter'


    

IntFilter = TypedDict(
    'IntFilter',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive1'],
    },
    total=False,
)


IntFilterRecursive1 = TypedDict(
    'IntFilterRecursive1',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive2'],
    },
    total=False,
)


IntFilterRecursive2 = TypedDict(
    'IntFilterRecursive2',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive3'],
    },
    total=False,
)


IntFilterRecursive3 = TypedDict(
    'IntFilterRecursive3',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive4'],
    },
    total=False,
)


IntFilterRecursive4 = TypedDict(
    'IntFilterRecursive4',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
            },
    total=False,
)


class IntWithAggregatesFilter(IntFilter, total=False):
    _max: 'IntFilter'
    _min: 'IntFilter'
    _sum: 'IntFilter'
    _avg: 'IntFilter'
    _count: 'IntFilter'


BigIntFilter = IntFilter
BigIntWithAggregatesFilter = IntWithAggregatesFilter
    

FloatFilter = TypedDict(
    'FloatFilter',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive1'],
    },
    total=False,
)


FloatFilterRecursive1 = TypedDict(
    'FloatFilterRecursive1',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive2'],
    },
    total=False,
)


FloatFilterRecursive2 = TypedDict(
    'FloatFilterRecursive2',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive3'],
    },
    total=False,
)


FloatFilterRecursive3 = TypedDict(
    'FloatFilterRecursive3',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive4'],
    },
    total=False,
)


FloatFilterRecursive4 = TypedDict(
    'FloatFilterRecursive4',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
            },
    total=False,
)


class FloatWithAggregatesFilter(FloatFilter, total=False):
    _max: 'FloatFilter'
    _min: 'FloatFilter'
    _sum: 'FloatFilter'
    _avg: 'FloatFilter'
    _count: 'IntFilter'


    

BytesFilter = TypedDict(
    'BytesFilter',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive1'],
    },
    total=False,
)


BytesFilterRecursive1 = TypedDict(
    'BytesFilterRecursive1',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive2'],
    },
    total=False,
)


BytesFilterRecursive2 = TypedDict(
    'BytesFilterRecursive2',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive3'],
    },
    total=False,
)


BytesFilterRecursive3 = TypedDict(
    'BytesFilterRecursive3',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive4'],
    },
    total=False,
)


BytesFilterRecursive4 = TypedDict(
    'BytesFilterRecursive4',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
            },
    total=False,
)


class BytesWithAggregatesFilter(BytesFilter, total=False):
    _max: 'BytesFilter'
    _min: 'BytesFilter'
    _sum: 'BytesFilter'
    _avg: 'BytesFilter'
    _count: 'IntFilter'


# TODO: preview feature for improving JSON filtering
JsonFilter = TypedDict(
    'JsonFilter',
    {
        'equals': 'fields.Json',
        'not': 'fields.Json',
    },
    total=False,
)


class JsonWithAggregatesFilter(JsonFilter, total=False):
    _max: 'JsonFilter'
    _min: 'JsonFilter'
    _sum: 'JsonFilter'
    _avg: 'JsonFilter'
    _count: 'IntFilter'


    

DecimalFilter = TypedDict(
    'DecimalFilter',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive1'],
    },
    total=False,
)


DecimalFilterRecursive1 = TypedDict(
    'DecimalFilterRecursive1',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive2'],
    },
    total=False,
)


DecimalFilterRecursive2 = TypedDict(
    'DecimalFilterRecursive2',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive3'],
    },
    total=False,
)


DecimalFilterRecursive3 = TypedDict(
    'DecimalFilterRecursive3',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive4'],
    },
    total=False,
)


DecimalFilterRecursive4 = TypedDict(
    'DecimalFilterRecursive4',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
            },
    total=False,
)


class DecimalWithAggregatesFilter(StringFilter, total=False):
    _max: 'DecimalFilter'
    _min: 'DecimalFilter'
    _sum: 'DecimalFilter'
    _avg: 'DecimalFilter'
    _count: 'IntFilter'


class _FloatSetInput(TypedDict):
    set: float


class _FloatDivideInput(TypedDict):
    divide: float


class _FloatMultiplyInput(TypedDict):
    multiply: float


class _FloatIncrementInput(TypedDict):
    increment: float


class _FloatDecrementInput(TypedDict):
    decrement: float


class _IntSetInput(TypedDict):
    set: int


class _IntDivideInput(TypedDict):
    divide: int


class _IntMultiplyInput(TypedDict):
    multiply: int


class _IntIncrementInput(TypedDict):
    increment: int


class _IntDecrementInput(TypedDict):
    decrement: int


AtomicFloatInput = Union[
    _FloatSetInput,
    _FloatDivideInput,
    _FloatMultiplyInput,
    _FloatIncrementInput,
    _FloatDecrementInput,
]
AtomicIntInput = Union[
    _IntSetInput,
    _IntDivideInput,
    _IntMultiplyInput,
    _IntIncrementInput,
    _IntDecrementInput,
]
AtomicBigIntInput = AtomicIntInput

class _StringListFilterEqualsInput(TypedDict):
    equals: Optional[List[_str]]


class _StringListFilterHasInput(TypedDict):
    has: _str


class _StringListFilterHasEveryInput(TypedDict):
    has_every: List[_str]


class _StringListFilterHasSomeInput(TypedDict):
    has_some: List[_str]


class _StringListFilterIsEmptyInput(TypedDict):
    is_empty: bool


StringListFilter = Union[
    _StringListFilterHasInput,
    _StringListFilterEqualsInput,
    _StringListFilterHasSomeInput,
    _StringListFilterIsEmptyInput,
    _StringListFilterHasEveryInput,
]


class _StringListUpdateSet(TypedDict):
    set: List[_str]


class _StringListUpdatePush(TypedDict):
    push: List[_str]


StringListUpdate = Union[
    List[_str],
    _StringListUpdateSet,
    _StringListUpdatePush,
]

class _BytesListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Base64']]


class _BytesListFilterHasInput(TypedDict):
    has: 'fields.Base64'


class _BytesListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Base64']


class _BytesListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Base64']


class _BytesListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BytesListFilter = Union[
    _BytesListFilterHasInput,
    _BytesListFilterEqualsInput,
    _BytesListFilterHasSomeInput,
    _BytesListFilterIsEmptyInput,
    _BytesListFilterHasEveryInput,
]


class _BytesListUpdateSet(TypedDict):
    set: List['fields.Base64']


class _BytesListUpdatePush(TypedDict):
    push: List['fields.Base64']


BytesListUpdate = Union[
    List['fields.Base64'],
    _BytesListUpdateSet,
    _BytesListUpdatePush,
]

class _DateTimeListFilterEqualsInput(TypedDict):
    equals: Optional[List[datetime.datetime]]


class _DateTimeListFilterHasInput(TypedDict):
    has: datetime.datetime


class _DateTimeListFilterHasEveryInput(TypedDict):
    has_every: List[datetime.datetime]


class _DateTimeListFilterHasSomeInput(TypedDict):
    has_some: List[datetime.datetime]


class _DateTimeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DateTimeListFilter = Union[
    _DateTimeListFilterHasInput,
    _DateTimeListFilterEqualsInput,
    _DateTimeListFilterHasSomeInput,
    _DateTimeListFilterIsEmptyInput,
    _DateTimeListFilterHasEveryInput,
]


class _DateTimeListUpdateSet(TypedDict):
    set: List[datetime.datetime]


class _DateTimeListUpdatePush(TypedDict):
    push: List[datetime.datetime]


DateTimeListUpdate = Union[
    List[datetime.datetime],
    _DateTimeListUpdateSet,
    _DateTimeListUpdatePush,
]

class _BooleanListFilterEqualsInput(TypedDict):
    equals: Optional[List[_bool]]


class _BooleanListFilterHasInput(TypedDict):
    has: _bool


class _BooleanListFilterHasEveryInput(TypedDict):
    has_every: List[_bool]


class _BooleanListFilterHasSomeInput(TypedDict):
    has_some: List[_bool]


class _BooleanListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BooleanListFilter = Union[
    _BooleanListFilterHasInput,
    _BooleanListFilterEqualsInput,
    _BooleanListFilterHasSomeInput,
    _BooleanListFilterIsEmptyInput,
    _BooleanListFilterHasEveryInput,
]


class _BooleanListUpdateSet(TypedDict):
    set: List[_bool]


class _BooleanListUpdatePush(TypedDict):
    push: List[_bool]


BooleanListUpdate = Union[
    List[_bool],
    _BooleanListUpdateSet,
    _BooleanListUpdatePush,
]

class _IntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _IntListFilterHasInput(TypedDict):
    has: _int


class _IntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _IntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _IntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


IntListFilter = Union[
    _IntListFilterHasInput,
    _IntListFilterEqualsInput,
    _IntListFilterHasSomeInput,
    _IntListFilterIsEmptyInput,
    _IntListFilterHasEveryInput,
]


class _IntListUpdateSet(TypedDict):
    set: List[_int]


class _IntListUpdatePush(TypedDict):
    push: List[_int]


IntListUpdate = Union[
    List[_int],
    _IntListUpdateSet,
    _IntListUpdatePush,
]

class _BigIntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _BigIntListFilterHasInput(TypedDict):
    has: _int


class _BigIntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _BigIntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _BigIntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BigIntListFilter = Union[
    _BigIntListFilterHasInput,
    _BigIntListFilterEqualsInput,
    _BigIntListFilterHasSomeInput,
    _BigIntListFilterIsEmptyInput,
    _BigIntListFilterHasEveryInput,
]


class _BigIntListUpdateSet(TypedDict):
    set: List[_int]


class _BigIntListUpdatePush(TypedDict):
    push: List[_int]


BigIntListUpdate = Union[
    List[_int],
    _BigIntListUpdateSet,
    _BigIntListUpdatePush,
]

class _FloatListFilterEqualsInput(TypedDict):
    equals: Optional[List[_float]]


class _FloatListFilterHasInput(TypedDict):
    has: _float


class _FloatListFilterHasEveryInput(TypedDict):
    has_every: List[_float]


class _FloatListFilterHasSomeInput(TypedDict):
    has_some: List[_float]


class _FloatListFilterIsEmptyInput(TypedDict):
    is_empty: bool


FloatListFilter = Union[
    _FloatListFilterHasInput,
    _FloatListFilterEqualsInput,
    _FloatListFilterHasSomeInput,
    _FloatListFilterIsEmptyInput,
    _FloatListFilterHasEveryInput,
]


class _FloatListUpdateSet(TypedDict):
    set: List[_float]


class _FloatListUpdatePush(TypedDict):
    push: List[_float]


FloatListUpdate = Union[
    List[_float],
    _FloatListUpdateSet,
    _FloatListUpdatePush,
]

class _JsonListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Json']]


class _JsonListFilterHasInput(TypedDict):
    has: 'fields.Json'


class _JsonListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Json']


class _JsonListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Json']


class _JsonListFilterIsEmptyInput(TypedDict):
    is_empty: bool


JsonListFilter = Union[
    _JsonListFilterHasInput,
    _JsonListFilterEqualsInput,
    _JsonListFilterHasSomeInput,
    _JsonListFilterIsEmptyInput,
    _JsonListFilterHasEveryInput,
]


class _JsonListUpdateSet(TypedDict):
    set: List['fields.Json']


class _JsonListUpdatePush(TypedDict):
    push: List['fields.Json']


JsonListUpdate = Union[
    List['fields.Json'],
    _JsonListUpdateSet,
    _JsonListUpdatePush,
]

class _DecimalListFilterEqualsInput(TypedDict):
    equals: Optional[List[decimal.Decimal]]


class _DecimalListFilterHasInput(TypedDict):
    has: decimal.Decimal


class _DecimalListFilterHasEveryInput(TypedDict):
    has_every: List[decimal.Decimal]


class _DecimalListFilterHasSomeInput(TypedDict):
    has_some: List[decimal.Decimal]


class _DecimalListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DecimalListFilter = Union[
    _DecimalListFilterHasInput,
    _DecimalListFilterEqualsInput,
    _DecimalListFilterHasSomeInput,
    _DecimalListFilterIsEmptyInput,
    _DecimalListFilterHasEveryInput,
]


class _DecimalListUpdateSet(TypedDict):
    set: List[decimal.Decimal]


class _DecimalListUpdatePush(TypedDict):
    push: List[decimal.Decimal]


DecimalListUpdate = Union[
    List[decimal.Decimal],
    _DecimalListUpdateSet,
    _DecimalListUpdatePush,
]


# Trecho types

class TrechoOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Trecho create method"""
    id: _int
    assentos: 'AssentoCreateManyNestedWithoutRelationsInput'
    trechosReservados: 'TrechoReservadoCreateManyNestedWithoutRelationsInput'


class TrechoCreateInput(TrechoOptionalCreateInput):
    """Required arguments to the Trecho create method"""
    origem: _str
    destino: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class TrechoOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Trecho create method, without relations"""
    id: _int


class TrechoCreateWithoutRelationsInput(TrechoOptionalCreateWithoutRelationsInput):
    """Required arguments to the Trecho create method, without relations"""
    origem: _str
    destino: _str

class TrechoConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'TrechoCreateWithoutRelationsInput'
    where: 'TrechoWhereUniqueInput'

class TrechoCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'TrechoCreateWithoutRelationsInput'
    connect: 'TrechoWhereUniqueInput'
    connect_or_create: 'TrechoConnectOrCreateWithoutRelationsInput'


class TrechoCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['TrechoCreateWithoutRelationsInput', List['TrechoCreateWithoutRelationsInput']]
    connect: Union['TrechoWhereUniqueInput', List['TrechoWhereUniqueInput']]
    connect_or_create: Union['TrechoConnectOrCreateWithoutRelationsInput', List['TrechoConnectOrCreateWithoutRelationsInput']]

_TrechoWhereUnique_id_Input = TypedDict(
    '_TrechoWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

TrechoWhereUniqueInput = _TrechoWhereUnique_id_Input


class TrechoUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    origem: _str
    destino: _str
    assentos: 'AssentoUpdateManyWithoutRelationsInput'
    trechosReservados: 'TrechoReservadoUpdateManyWithoutRelationsInput'


class TrechoUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    origem: _str
    destino: _str


class TrechoUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['TrechoCreateWithoutRelationsInput']
    connect: List['TrechoWhereUniqueInput']
    connect_or_create: List['TrechoConnectOrCreateWithoutRelationsInput']
    set: List['TrechoWhereUniqueInput']
    disconnect: List['TrechoWhereUniqueInput']
    delete: List['TrechoWhereUniqueInput']

    # TODO
    # update: List['TrechoUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['TrechoUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['TrechoScalarWhereInput']
    # upsert: List['TrechoUpserteWithWhereUniqueWithoutRelationsInput']


class TrechoUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'TrechoCreateWithoutRelationsInput'
    connect: 'TrechoWhereUniqueInput'
    connect_or_create: 'TrechoConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'TrechoUpdateInput'
    # upsert: 'TrechoUpsertWithoutRelationsInput'


class TrechoUpsertInput(TypedDict):
    create: 'TrechoCreateInput'
    update: 'TrechoUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Trecho_id_OrderByInput = TypedDict(
    '_Trecho_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Trecho_origem_OrderByInput = TypedDict(
    '_Trecho_origem_OrderByInput',
    {
        'origem': 'SortOrder',
    },
    total=True
)

_Trecho_destino_OrderByInput = TypedDict(
    '_Trecho_destino_OrderByInput',
    {
        'destino': 'SortOrder',
    },
    total=True
)

_Trecho_RelevanceInner = TypedDict(
    '_Trecho_RelevanceInner',
    {
        'fields': 'List[TrechoScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Trecho_RelevanceOrderByInput = TypedDict(
    '_Trecho_RelevanceOrderByInput',
    {
        '_relevance': '_Trecho_RelevanceInner',
    },
    total=True
)

TrechoOrderByInput = Union[
    '_Trecho_id_OrderByInput',
    '_Trecho_origem_OrderByInput',
    '_Trecho_destino_OrderByInput',
    '_Trecho_RelevanceOrderByInput',
]



# recursive Trecho types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

TrechoRelationFilter = TypedDict(
    'TrechoRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class TrechoListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class TrechoInclude(TypedDict, total=False):
    """Trecho relational arguments"""
    assentos: Union[bool, 'FindManyAssentoArgsFromTrecho']
    trechosReservados: Union[bool, 'FindManyTrechoReservadoArgsFromTrecho']


    

class TrechoIncludeFromTrecho(TypedDict, total=False):
    """Relational arguments for Trecho"""
    assentos: Union[bool, 'FindManyAssentoArgsFromTrechoRecursive1']
    trechosReservados: Union[bool, 'FindManyTrechoReservadoArgsFromTrechoRecursive1']


class TrechoIncludeFromTrechoRecursive1(TypedDict, total=False):
    """Relational arguments for Trecho"""
    assentos: Union[bool, 'FindManyAssentoArgsFromTrechoRecursive2']
    trechosReservados: Union[bool, 'FindManyTrechoReservadoArgsFromTrechoRecursive2']


class TrechoIncludeFromTrechoRecursive2(TypedDict, total=False):
    """Relational arguments for Trecho"""
    assentos: Union[bool, 'FindManyAssentoArgsFromTrechoRecursive3']
    trechosReservados: Union[bool, 'FindManyTrechoReservadoArgsFromTrechoRecursive3']


class TrechoIncludeFromTrechoRecursive3(TypedDict, total=False):
    """Relational arguments for Trecho"""
    assentos: Union[bool, 'FindManyAssentoArgsFromTrechoRecursive4']
    trechosReservados: Union[bool, 'FindManyTrechoReservadoArgsFromTrechoRecursive4']


class TrechoIncludeFromTrechoRecursive4(TypedDict, total=False):
    """Relational arguments for Trecho"""

    

class TrechoArgsFromTrecho(TypedDict, total=False):
    """Arguments for Trecho"""
    include: 'TrechoIncludeFromTrechoRecursive1'


class TrechoArgsFromTrechoRecursive1(TypedDict, total=False):
    """Arguments for Trecho"""
    include: 'TrechoIncludeFromTrechoRecursive2'


class TrechoArgsFromTrechoRecursive2(TypedDict, total=False):
    """Arguments for Trecho"""
    include: 'TrechoIncludeFromTrechoRecursive3'


class TrechoArgsFromTrechoRecursive3(TypedDict, total=False):
    """Arguments for Trecho"""
    include: 'TrechoIncludeFromTrechoRecursive4'


class TrechoArgsFromTrechoRecursive4(TypedDict, total=False):
    """Arguments for Trecho"""
    
    

class FindManyTrechoArgsFromTrecho(TypedDict, total=False):
    """Arguments for Trecho"""
    take: int
    skip: int
    order_by: Union['TrechoOrderByInput', List['TrechoOrderByInput']]
    where: 'TrechoWhereInput'
    cursor: 'TrechoWhereUniqueInput'
    distinct: List['TrechoScalarFieldKeys']
    include: 'TrechoIncludeFromTrechoRecursive1'


class FindManyTrechoArgsFromTrechoRecursive1(TypedDict, total=False):
    """Arguments for Trecho"""
    take: int
    skip: int
    order_by: Union['TrechoOrderByInput', List['TrechoOrderByInput']]
    where: 'TrechoWhereInput'
    cursor: 'TrechoWhereUniqueInput'
    distinct: List['TrechoScalarFieldKeys']
    include: 'TrechoIncludeFromTrechoRecursive2'


class FindManyTrechoArgsFromTrechoRecursive2(TypedDict, total=False):
    """Arguments for Trecho"""
    take: int
    skip: int
    order_by: Union['TrechoOrderByInput', List['TrechoOrderByInput']]
    where: 'TrechoWhereInput'
    cursor: 'TrechoWhereUniqueInput'
    distinct: List['TrechoScalarFieldKeys']
    include: 'TrechoIncludeFromTrechoRecursive3'


class FindManyTrechoArgsFromTrechoRecursive3(TypedDict, total=False):
    """Arguments for Trecho"""
    take: int
    skip: int
    order_by: Union['TrechoOrderByInput', List['TrechoOrderByInput']]
    where: 'TrechoWhereInput'
    cursor: 'TrechoWhereUniqueInput'
    distinct: List['TrechoScalarFieldKeys']
    include: 'TrechoIncludeFromTrechoRecursive4'


class FindManyTrechoArgsFromTrechoRecursive4(TypedDict, total=False):
    """Arguments for Trecho"""
    take: int
    skip: int
    order_by: Union['TrechoOrderByInput', List['TrechoOrderByInput']]
    where: 'TrechoWhereInput'
    cursor: 'TrechoWhereUniqueInput'
    distinct: List['TrechoScalarFieldKeys']
    
    

class AssentoIncludeFromTrecho(TypedDict, total=False):
    """Relational arguments for Trecho"""
    trecho: Union[bool, 'TrechoArgsFromTrechoRecursive1']
    trechoReservados: Union[bool, 'FindManyTrechoReservadoArgsFromTrechoRecursive1']


class AssentoIncludeFromTrechoRecursive1(TypedDict, total=False):
    """Relational arguments for Trecho"""
    trecho: Union[bool, 'TrechoArgsFromTrechoRecursive2']
    trechoReservados: Union[bool, 'FindManyTrechoReservadoArgsFromTrechoRecursive2']


class AssentoIncludeFromTrechoRecursive2(TypedDict, total=False):
    """Relational arguments for Trecho"""
    trecho: Union[bool, 'TrechoArgsFromTrechoRecursive3']
    trechoReservados: Union[bool, 'FindManyTrechoReservadoArgsFromTrechoRecursive3']


class AssentoIncludeFromTrechoRecursive3(TypedDict, total=False):
    """Relational arguments for Trecho"""
    trecho: Union[bool, 'TrechoArgsFromTrechoRecursive4']
    trechoReservados: Union[bool, 'FindManyTrechoReservadoArgsFromTrechoRecursive4']


class AssentoIncludeFromTrechoRecursive4(TypedDict, total=False):
    """Relational arguments for Trecho"""

    

class AssentoArgsFromTrecho(TypedDict, total=False):
    """Arguments for Trecho"""
    include: 'AssentoIncludeFromAssentoRecursive1'


class AssentoArgsFromTrechoRecursive1(TypedDict, total=False):
    """Arguments for Trecho"""
    include: 'AssentoIncludeFromAssentoRecursive2'


class AssentoArgsFromTrechoRecursive2(TypedDict, total=False):
    """Arguments for Trecho"""
    include: 'AssentoIncludeFromAssentoRecursive3'


class AssentoArgsFromTrechoRecursive3(TypedDict, total=False):
    """Arguments for Trecho"""
    include: 'AssentoIncludeFromAssentoRecursive4'


class AssentoArgsFromTrechoRecursive4(TypedDict, total=False):
    """Arguments for Trecho"""
    
    

class FindManyAssentoArgsFromTrecho(TypedDict, total=False):
    """Arguments for Trecho"""
    take: int
    skip: int
    order_by: Union['AssentoOrderByInput', List['AssentoOrderByInput']]
    where: 'AssentoWhereInput'
    cursor: 'AssentoWhereUniqueInput'
    distinct: List['AssentoScalarFieldKeys']
    include: 'AssentoIncludeFromAssentoRecursive1'


class FindManyAssentoArgsFromTrechoRecursive1(TypedDict, total=False):
    """Arguments for Trecho"""
    take: int
    skip: int
    order_by: Union['AssentoOrderByInput', List['AssentoOrderByInput']]
    where: 'AssentoWhereInput'
    cursor: 'AssentoWhereUniqueInput'
    distinct: List['AssentoScalarFieldKeys']
    include: 'AssentoIncludeFromAssentoRecursive2'


class FindManyAssentoArgsFromTrechoRecursive2(TypedDict, total=False):
    """Arguments for Trecho"""
    take: int
    skip: int
    order_by: Union['AssentoOrderByInput', List['AssentoOrderByInput']]
    where: 'AssentoWhereInput'
    cursor: 'AssentoWhereUniqueInput'
    distinct: List['AssentoScalarFieldKeys']
    include: 'AssentoIncludeFromAssentoRecursive3'


class FindManyAssentoArgsFromTrechoRecursive3(TypedDict, total=False):
    """Arguments for Trecho"""
    take: int
    skip: int
    order_by: Union['AssentoOrderByInput', List['AssentoOrderByInput']]
    where: 'AssentoWhereInput'
    cursor: 'AssentoWhereUniqueInput'
    distinct: List['AssentoScalarFieldKeys']
    include: 'AssentoIncludeFromAssentoRecursive4'


class FindManyAssentoArgsFromTrechoRecursive4(TypedDict, total=False):
    """Arguments for Trecho"""
    take: int
    skip: int
    order_by: Union['AssentoOrderByInput', List['AssentoOrderByInput']]
    where: 'AssentoWhereInput'
    cursor: 'AssentoWhereUniqueInput'
    distinct: List['AssentoScalarFieldKeys']
    
    

class TrechoReservadoIncludeFromTrecho(TypedDict, total=False):
    """Relational arguments for Trecho"""
    passagem: Union[bool, 'PassagemArgsFromTrechoRecursive1']
    trecho: Union[bool, 'TrechoArgsFromTrechoRecursive1']
    assento: Union[bool, 'AssentoArgsFromTrechoRecursive1']


class TrechoReservadoIncludeFromTrechoRecursive1(TypedDict, total=False):
    """Relational arguments for Trecho"""
    passagem: Union[bool, 'PassagemArgsFromTrechoRecursive2']
    trecho: Union[bool, 'TrechoArgsFromTrechoRecursive2']
    assento: Union[bool, 'AssentoArgsFromTrechoRecursive2']


class TrechoReservadoIncludeFromTrechoRecursive2(TypedDict, total=False):
    """Relational arguments for Trecho"""
    passagem: Union[bool, 'PassagemArgsFromTrechoRecursive3']
    trecho: Union[bool, 'TrechoArgsFromTrechoRecursive3']
    assento: Union[bool, 'AssentoArgsFromTrechoRecursive3']


class TrechoReservadoIncludeFromTrechoRecursive3(TypedDict, total=False):
    """Relational arguments for Trecho"""
    passagem: Union[bool, 'PassagemArgsFromTrechoRecursive4']
    trecho: Union[bool, 'TrechoArgsFromTrechoRecursive4']
    assento: Union[bool, 'AssentoArgsFromTrechoRecursive4']


class TrechoReservadoIncludeFromTrechoRecursive4(TypedDict, total=False):
    """Relational arguments for Trecho"""

    

class TrechoReservadoArgsFromTrecho(TypedDict, total=False):
    """Arguments for Trecho"""
    include: 'TrechoReservadoIncludeFromTrechoReservadoRecursive1'


class TrechoReservadoArgsFromTrechoRecursive1(TypedDict, total=False):
    """Arguments for Trecho"""
    include: 'TrechoReservadoIncludeFromTrechoReservadoRecursive2'


class TrechoReservadoArgsFromTrechoRecursive2(TypedDict, total=False):
    """Arguments for Trecho"""
    include: 'TrechoReservadoIncludeFromTrechoReservadoRecursive3'


class TrechoReservadoArgsFromTrechoRecursive3(TypedDict, total=False):
    """Arguments for Trecho"""
    include: 'TrechoReservadoIncludeFromTrechoReservadoRecursive4'


class TrechoReservadoArgsFromTrechoRecursive4(TypedDict, total=False):
    """Arguments for Trecho"""
    
    

class FindManyTrechoReservadoArgsFromTrecho(TypedDict, total=False):
    """Arguments for Trecho"""
    take: int
    skip: int
    order_by: Union['TrechoReservadoOrderByInput', List['TrechoReservadoOrderByInput']]
    where: 'TrechoReservadoWhereInput'
    cursor: 'TrechoReservadoWhereUniqueInput'
    distinct: List['TrechoReservadoScalarFieldKeys']
    include: 'TrechoReservadoIncludeFromTrechoReservadoRecursive1'


class FindManyTrechoReservadoArgsFromTrechoRecursive1(TypedDict, total=False):
    """Arguments for Trecho"""
    take: int
    skip: int
    order_by: Union['TrechoReservadoOrderByInput', List['TrechoReservadoOrderByInput']]
    where: 'TrechoReservadoWhereInput'
    cursor: 'TrechoReservadoWhereUniqueInput'
    distinct: List['TrechoReservadoScalarFieldKeys']
    include: 'TrechoReservadoIncludeFromTrechoReservadoRecursive2'


class FindManyTrechoReservadoArgsFromTrechoRecursive2(TypedDict, total=False):
    """Arguments for Trecho"""
    take: int
    skip: int
    order_by: Union['TrechoReservadoOrderByInput', List['TrechoReservadoOrderByInput']]
    where: 'TrechoReservadoWhereInput'
    cursor: 'TrechoReservadoWhereUniqueInput'
    distinct: List['TrechoReservadoScalarFieldKeys']
    include: 'TrechoReservadoIncludeFromTrechoReservadoRecursive3'


class FindManyTrechoReservadoArgsFromTrechoRecursive3(TypedDict, total=False):
    """Arguments for Trecho"""
    take: int
    skip: int
    order_by: Union['TrechoReservadoOrderByInput', List['TrechoReservadoOrderByInput']]
    where: 'TrechoReservadoWhereInput'
    cursor: 'TrechoReservadoWhereUniqueInput'
    distinct: List['TrechoReservadoScalarFieldKeys']
    include: 'TrechoReservadoIncludeFromTrechoReservadoRecursive4'


class FindManyTrechoReservadoArgsFromTrechoRecursive4(TypedDict, total=False):
    """Arguments for Trecho"""
    take: int
    skip: int
    order_by: Union['TrechoReservadoOrderByInput', List['TrechoReservadoOrderByInput']]
    where: 'TrechoReservadoWhereInput'
    cursor: 'TrechoReservadoWhereUniqueInput'
    distinct: List['TrechoReservadoScalarFieldKeys']
    
    

class PassagemIncludeFromTrecho(TypedDict, total=False):
    """Relational arguments for Trecho"""
    user: Union[bool, 'UserArgsFromTrechoRecursive1']
    trechosReservados: Union[bool, 'FindManyTrechoReservadoArgsFromTrechoRecursive1']


class PassagemIncludeFromTrechoRecursive1(TypedDict, total=False):
    """Relational arguments for Trecho"""
    user: Union[bool, 'UserArgsFromTrechoRecursive2']
    trechosReservados: Union[bool, 'FindManyTrechoReservadoArgsFromTrechoRecursive2']


class PassagemIncludeFromTrechoRecursive2(TypedDict, total=False):
    """Relational arguments for Trecho"""
    user: Union[bool, 'UserArgsFromTrechoRecursive3']
    trechosReservados: Union[bool, 'FindManyTrechoReservadoArgsFromTrechoRecursive3']


class PassagemIncludeFromTrechoRecursive3(TypedDict, total=False):
    """Relational arguments for Trecho"""
    user: Union[bool, 'UserArgsFromTrechoRecursive4']
    trechosReservados: Union[bool, 'FindManyTrechoReservadoArgsFromTrechoRecursive4']


class PassagemIncludeFromTrechoRecursive4(TypedDict, total=False):
    """Relational arguments for Trecho"""

    

class PassagemArgsFromTrecho(TypedDict, total=False):
    """Arguments for Trecho"""
    include: 'PassagemIncludeFromPassagemRecursive1'


class PassagemArgsFromTrechoRecursive1(TypedDict, total=False):
    """Arguments for Trecho"""
    include: 'PassagemIncludeFromPassagemRecursive2'


class PassagemArgsFromTrechoRecursive2(TypedDict, total=False):
    """Arguments for Trecho"""
    include: 'PassagemIncludeFromPassagemRecursive3'


class PassagemArgsFromTrechoRecursive3(TypedDict, total=False):
    """Arguments for Trecho"""
    include: 'PassagemIncludeFromPassagemRecursive4'


class PassagemArgsFromTrechoRecursive4(TypedDict, total=False):
    """Arguments for Trecho"""
    
    

class FindManyPassagemArgsFromTrecho(TypedDict, total=False):
    """Arguments for Trecho"""
    take: int
    skip: int
    order_by: Union['PassagemOrderByInput', List['PassagemOrderByInput']]
    where: 'PassagemWhereInput'
    cursor: 'PassagemWhereUniqueInput'
    distinct: List['PassagemScalarFieldKeys']
    include: 'PassagemIncludeFromPassagemRecursive1'


class FindManyPassagemArgsFromTrechoRecursive1(TypedDict, total=False):
    """Arguments for Trecho"""
    take: int
    skip: int
    order_by: Union['PassagemOrderByInput', List['PassagemOrderByInput']]
    where: 'PassagemWhereInput'
    cursor: 'PassagemWhereUniqueInput'
    distinct: List['PassagemScalarFieldKeys']
    include: 'PassagemIncludeFromPassagemRecursive2'


class FindManyPassagemArgsFromTrechoRecursive2(TypedDict, total=False):
    """Arguments for Trecho"""
    take: int
    skip: int
    order_by: Union['PassagemOrderByInput', List['PassagemOrderByInput']]
    where: 'PassagemWhereInput'
    cursor: 'PassagemWhereUniqueInput'
    distinct: List['PassagemScalarFieldKeys']
    include: 'PassagemIncludeFromPassagemRecursive3'


class FindManyPassagemArgsFromTrechoRecursive3(TypedDict, total=False):
    """Arguments for Trecho"""
    take: int
    skip: int
    order_by: Union['PassagemOrderByInput', List['PassagemOrderByInput']]
    where: 'PassagemWhereInput'
    cursor: 'PassagemWhereUniqueInput'
    distinct: List['PassagemScalarFieldKeys']
    include: 'PassagemIncludeFromPassagemRecursive4'


class FindManyPassagemArgsFromTrechoRecursive4(TypedDict, total=False):
    """Arguments for Trecho"""
    take: int
    skip: int
    order_by: Union['PassagemOrderByInput', List['PassagemOrderByInput']]
    where: 'PassagemWhereInput'
    cursor: 'PassagemWhereUniqueInput'
    distinct: List['PassagemScalarFieldKeys']
    
    

class UserIncludeFromTrecho(TypedDict, total=False):
    """Relational arguments for Trecho"""
    passagens: Union[bool, 'FindManyPassagemArgsFromTrechoRecursive1']


class UserIncludeFromTrechoRecursive1(TypedDict, total=False):
    """Relational arguments for Trecho"""
    passagens: Union[bool, 'FindManyPassagemArgsFromTrechoRecursive2']


class UserIncludeFromTrechoRecursive2(TypedDict, total=False):
    """Relational arguments for Trecho"""
    passagens: Union[bool, 'FindManyPassagemArgsFromTrechoRecursive3']


class UserIncludeFromTrechoRecursive3(TypedDict, total=False):
    """Relational arguments for Trecho"""
    passagens: Union[bool, 'FindManyPassagemArgsFromTrechoRecursive4']


class UserIncludeFromTrechoRecursive4(TypedDict, total=False):
    """Relational arguments for Trecho"""

    

class UserArgsFromTrecho(TypedDict, total=False):
    """Arguments for Trecho"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromTrechoRecursive1(TypedDict, total=False):
    """Arguments for Trecho"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromTrechoRecursive2(TypedDict, total=False):
    """Arguments for Trecho"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromTrechoRecursive3(TypedDict, total=False):
    """Arguments for Trecho"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromTrechoRecursive4(TypedDict, total=False):
    """Arguments for Trecho"""
    
    

class FindManyUserArgsFromTrecho(TypedDict, total=False):
    """Arguments for Trecho"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromTrechoRecursive1(TypedDict, total=False):
    """Arguments for Trecho"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromTrechoRecursive2(TypedDict, total=False):
    """Arguments for Trecho"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromTrechoRecursive3(TypedDict, total=False):
    """Arguments for Trecho"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromTrechoRecursive4(TypedDict, total=False):
    """Arguments for Trecho"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    


FindManyTrechoArgs = FindManyTrechoArgsFromTrecho
FindFirstTrechoArgs = FindManyTrechoArgsFromTrecho


    

class TrechoWhereInput(TypedDict, total=False):
    """Trecho arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    origem: Union[_str, 'types.StringFilter']
    destino: Union[_str, 'types.StringFilter']
    assentos: 'AssentoListRelationFilter'
    trechosReservados: 'TrechoReservadoListRelationFilter'

    # should be noted that AND and NOT should be Union['TrechoWhereInputRecursive1', List['TrechoWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['TrechoWhereInputRecursive1']
    OR: List['TrechoWhereInputRecursive1']
    NOT: List['TrechoWhereInputRecursive1']


class TrechoWhereInputRecursive1(TypedDict, total=False):
    """Trecho arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    origem: Union[_str, 'types.StringFilter']
    destino: Union[_str, 'types.StringFilter']
    assentos: 'AssentoListRelationFilter'
    trechosReservados: 'TrechoReservadoListRelationFilter'

    # should be noted that AND and NOT should be Union['TrechoWhereInputRecursive2', List['TrechoWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['TrechoWhereInputRecursive2']
    OR: List['TrechoWhereInputRecursive2']
    NOT: List['TrechoWhereInputRecursive2']


class TrechoWhereInputRecursive2(TypedDict, total=False):
    """Trecho arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    origem: Union[_str, 'types.StringFilter']
    destino: Union[_str, 'types.StringFilter']
    assentos: 'AssentoListRelationFilter'
    trechosReservados: 'TrechoReservadoListRelationFilter'

    # should be noted that AND and NOT should be Union['TrechoWhereInputRecursive3', List['TrechoWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['TrechoWhereInputRecursive3']
    OR: List['TrechoWhereInputRecursive3']
    NOT: List['TrechoWhereInputRecursive3']


class TrechoWhereInputRecursive3(TypedDict, total=False):
    """Trecho arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    origem: Union[_str, 'types.StringFilter']
    destino: Union[_str, 'types.StringFilter']
    assentos: 'AssentoListRelationFilter'
    trechosReservados: 'TrechoReservadoListRelationFilter'

    # should be noted that AND and NOT should be Union['TrechoWhereInputRecursive4', List['TrechoWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['TrechoWhereInputRecursive4']
    OR: List['TrechoWhereInputRecursive4']
    NOT: List['TrechoWhereInputRecursive4']


class TrechoWhereInputRecursive4(TypedDict, total=False):
    """Trecho arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    origem: Union[_str, 'types.StringFilter']
    destino: Union[_str, 'types.StringFilter']
    assentos: 'AssentoListRelationFilter'
    trechosReservados: 'TrechoReservadoListRelationFilter'



# aggregate Trecho types


    

class TrechoScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Trecho arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    origem: Union[_str, 'types.StringWithAggregatesFilter']
    destino: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['TrechoScalarWhereWithAggregatesInputRecursive1']
    OR: List['TrechoScalarWhereWithAggregatesInputRecursive1']
    NOT: List['TrechoScalarWhereWithAggregatesInputRecursive1']


class TrechoScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Trecho arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    origem: Union[_str, 'types.StringWithAggregatesFilter']
    destino: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['TrechoScalarWhereWithAggregatesInputRecursive2']
    OR: List['TrechoScalarWhereWithAggregatesInputRecursive2']
    NOT: List['TrechoScalarWhereWithAggregatesInputRecursive2']


class TrechoScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Trecho arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    origem: Union[_str, 'types.StringWithAggregatesFilter']
    destino: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['TrechoScalarWhereWithAggregatesInputRecursive3']
    OR: List['TrechoScalarWhereWithAggregatesInputRecursive3']
    NOT: List['TrechoScalarWhereWithAggregatesInputRecursive3']


class TrechoScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Trecho arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    origem: Union[_str, 'types.StringWithAggregatesFilter']
    destino: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['TrechoScalarWhereWithAggregatesInputRecursive4']
    OR: List['TrechoScalarWhereWithAggregatesInputRecursive4']
    NOT: List['TrechoScalarWhereWithAggregatesInputRecursive4']


class TrechoScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Trecho arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    origem: Union[_str, 'types.StringWithAggregatesFilter']
    destino: Union[_str, 'types.StringWithAggregatesFilter']



class TrechoGroupByOutput(TypedDict, total=False):
    id: _int
    origem: _str
    destino: _str
    _sum: 'TrechoSumAggregateOutput'
    _avg: 'TrechoAvgAggregateOutput'
    _min: 'TrechoMinAggregateOutput'
    _max: 'TrechoMaxAggregateOutput'
    _count: 'TrechoCountAggregateOutput'


class TrechoAvgAggregateOutput(TypedDict, total=False):
    """Trecho output for aggregating averages"""
    id: float


class TrechoSumAggregateOutput(TypedDict, total=False):
    """Trecho output for aggregating sums"""
    id: _int


class TrechoScalarAggregateOutput(TypedDict, total=False):
    """Trecho output including scalar fields"""
    id: _int
    origem: _str
    destino: _str


TrechoMinAggregateOutput = TrechoScalarAggregateOutput
TrechoMaxAggregateOutput = TrechoScalarAggregateOutput


class TrechoMaxAggregateInput(TypedDict, total=False):
    """Trecho input for aggregating by max"""
    id: bool
    origem: bool
    destino: bool


class TrechoMinAggregateInput(TypedDict, total=False):
    """Trecho input for aggregating by min"""
    id: bool
    origem: bool
    destino: bool


class TrechoNumberAggregateInput(TypedDict, total=False):
    """Trecho input for aggregating numbers"""
    id: bool


TrechoAvgAggregateInput = TrechoNumberAggregateInput
TrechoSumAggregateInput = TrechoNumberAggregateInput


TrechoCountAggregateInput = TypedDict(
    'TrechoCountAggregateInput',
    {
        'id': bool,
        'origem': bool,
        'destino': bool,
        '_all': bool,
    },
    total=False,
)

TrechoCountAggregateOutput = TypedDict(
    'TrechoCountAggregateOutput',
    {
        'id': int,
        'origem': int,
        'destino': int,
        '_all': int,
    },
    total=False,
)


TrechoKeys = Literal[
    'id',
    'origem',
    'destino',
    'assentos',
    'trechosReservados',
]
TrechoScalarFieldKeys = Literal[
    'id',
    'origem',
    'destino',
]
TrechoScalarFieldKeysT = TypeVar('TrechoScalarFieldKeysT', bound=TrechoScalarFieldKeys)

TrechoRelationalFieldKeys = Literal[
        'assentos',
        'trechosReservados',
    ]

# Assento types

class AssentoOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Assento create method"""
    id: _int
    trecho: 'TrechoCreateNestedWithoutRelationsInput'
    id_trecho: _int
    trechoReservados: 'TrechoReservadoCreateManyNestedWithoutRelationsInput'


class AssentoCreateInput(AssentoOptionalCreateInput):
    """Required arguments to the Assento create method"""
    numero: _int


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class AssentoOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Assento create method, without relations"""
    id: _int
    id_trecho: _int


class AssentoCreateWithoutRelationsInput(AssentoOptionalCreateWithoutRelationsInput):
    """Required arguments to the Assento create method, without relations"""
    numero: _int

class AssentoConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'AssentoCreateWithoutRelationsInput'
    where: 'AssentoWhereUniqueInput'

class AssentoCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'AssentoCreateWithoutRelationsInput'
    connect: 'AssentoWhereUniqueInput'
    connect_or_create: 'AssentoConnectOrCreateWithoutRelationsInput'


class AssentoCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['AssentoCreateWithoutRelationsInput', List['AssentoCreateWithoutRelationsInput']]
    connect: Union['AssentoWhereUniqueInput', List['AssentoWhereUniqueInput']]
    connect_or_create: Union['AssentoConnectOrCreateWithoutRelationsInput', List['AssentoConnectOrCreateWithoutRelationsInput']]

_AssentoWhereUnique_id_Input = TypedDict(
    '_AssentoWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

AssentoWhereUniqueInput = _AssentoWhereUnique_id_Input


class AssentoUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    numero: Union[AtomicIntInput, _int]
    trecho: 'TrechoUpdateOneWithoutRelationsInput'
    trechoReservados: 'TrechoReservadoUpdateManyWithoutRelationsInput'


class AssentoUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    numero: Union[AtomicIntInput, _int]


class AssentoUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['AssentoCreateWithoutRelationsInput']
    connect: List['AssentoWhereUniqueInput']
    connect_or_create: List['AssentoConnectOrCreateWithoutRelationsInput']
    set: List['AssentoWhereUniqueInput']
    disconnect: List['AssentoWhereUniqueInput']
    delete: List['AssentoWhereUniqueInput']

    # TODO
    # update: List['AssentoUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['AssentoUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['AssentoScalarWhereInput']
    # upsert: List['AssentoUpserteWithWhereUniqueWithoutRelationsInput']


class AssentoUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'AssentoCreateWithoutRelationsInput'
    connect: 'AssentoWhereUniqueInput'
    connect_or_create: 'AssentoConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'AssentoUpdateInput'
    # upsert: 'AssentoUpsertWithoutRelationsInput'


class AssentoUpsertInput(TypedDict):
    create: 'AssentoCreateInput'
    update: 'AssentoUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Assento_id_OrderByInput = TypedDict(
    '_Assento_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Assento_numero_OrderByInput = TypedDict(
    '_Assento_numero_OrderByInput',
    {
        'numero': 'SortOrder',
    },
    total=True
)

_Assento_id_trecho_OrderByInput = TypedDict(
    '_Assento_id_trecho_OrderByInput',
    {
        'id_trecho': 'SortOrder',
    },
    total=True
)

_Assento_RelevanceInner = TypedDict(
    '_Assento_RelevanceInner',
    {
        'fields': 'List[AssentoScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Assento_RelevanceOrderByInput = TypedDict(
    '_Assento_RelevanceOrderByInput',
    {
        '_relevance': '_Assento_RelevanceInner',
    },
    total=True
)

AssentoOrderByInput = Union[
    '_Assento_id_OrderByInput',
    '_Assento_numero_OrderByInput',
    '_Assento_id_trecho_OrderByInput',
    '_Assento_RelevanceOrderByInput',
]



# recursive Assento types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

AssentoRelationFilter = TypedDict(
    'AssentoRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class AssentoListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class AssentoInclude(TypedDict, total=False):
    """Assento relational arguments"""
    trecho: Union[bool, 'TrechoArgsFromAssento']
    trechoReservados: Union[bool, 'FindManyTrechoReservadoArgsFromAssento']


    

class TrechoIncludeFromAssento(TypedDict, total=False):
    """Relational arguments for Assento"""
    assentos: Union[bool, 'FindManyAssentoArgsFromAssentoRecursive1']
    trechosReservados: Union[bool, 'FindManyTrechoReservadoArgsFromAssentoRecursive1']


class TrechoIncludeFromAssentoRecursive1(TypedDict, total=False):
    """Relational arguments for Assento"""
    assentos: Union[bool, 'FindManyAssentoArgsFromAssentoRecursive2']
    trechosReservados: Union[bool, 'FindManyTrechoReservadoArgsFromAssentoRecursive2']


class TrechoIncludeFromAssentoRecursive2(TypedDict, total=False):
    """Relational arguments for Assento"""
    assentos: Union[bool, 'FindManyAssentoArgsFromAssentoRecursive3']
    trechosReservados: Union[bool, 'FindManyTrechoReservadoArgsFromAssentoRecursive3']


class TrechoIncludeFromAssentoRecursive3(TypedDict, total=False):
    """Relational arguments for Assento"""
    assentos: Union[bool, 'FindManyAssentoArgsFromAssentoRecursive4']
    trechosReservados: Union[bool, 'FindManyTrechoReservadoArgsFromAssentoRecursive4']


class TrechoIncludeFromAssentoRecursive4(TypedDict, total=False):
    """Relational arguments for Assento"""

    

class TrechoArgsFromAssento(TypedDict, total=False):
    """Arguments for Assento"""
    include: 'TrechoIncludeFromTrechoRecursive1'


class TrechoArgsFromAssentoRecursive1(TypedDict, total=False):
    """Arguments for Assento"""
    include: 'TrechoIncludeFromTrechoRecursive2'


class TrechoArgsFromAssentoRecursive2(TypedDict, total=False):
    """Arguments for Assento"""
    include: 'TrechoIncludeFromTrechoRecursive3'


class TrechoArgsFromAssentoRecursive3(TypedDict, total=False):
    """Arguments for Assento"""
    include: 'TrechoIncludeFromTrechoRecursive4'


class TrechoArgsFromAssentoRecursive4(TypedDict, total=False):
    """Arguments for Assento"""
    
    

class FindManyTrechoArgsFromAssento(TypedDict, total=False):
    """Arguments for Assento"""
    take: int
    skip: int
    order_by: Union['TrechoOrderByInput', List['TrechoOrderByInput']]
    where: 'TrechoWhereInput'
    cursor: 'TrechoWhereUniqueInput'
    distinct: List['TrechoScalarFieldKeys']
    include: 'TrechoIncludeFromTrechoRecursive1'


class FindManyTrechoArgsFromAssentoRecursive1(TypedDict, total=False):
    """Arguments for Assento"""
    take: int
    skip: int
    order_by: Union['TrechoOrderByInput', List['TrechoOrderByInput']]
    where: 'TrechoWhereInput'
    cursor: 'TrechoWhereUniqueInput'
    distinct: List['TrechoScalarFieldKeys']
    include: 'TrechoIncludeFromTrechoRecursive2'


class FindManyTrechoArgsFromAssentoRecursive2(TypedDict, total=False):
    """Arguments for Assento"""
    take: int
    skip: int
    order_by: Union['TrechoOrderByInput', List['TrechoOrderByInput']]
    where: 'TrechoWhereInput'
    cursor: 'TrechoWhereUniqueInput'
    distinct: List['TrechoScalarFieldKeys']
    include: 'TrechoIncludeFromTrechoRecursive3'


class FindManyTrechoArgsFromAssentoRecursive3(TypedDict, total=False):
    """Arguments for Assento"""
    take: int
    skip: int
    order_by: Union['TrechoOrderByInput', List['TrechoOrderByInput']]
    where: 'TrechoWhereInput'
    cursor: 'TrechoWhereUniqueInput'
    distinct: List['TrechoScalarFieldKeys']
    include: 'TrechoIncludeFromTrechoRecursive4'


class FindManyTrechoArgsFromAssentoRecursive4(TypedDict, total=False):
    """Arguments for Assento"""
    take: int
    skip: int
    order_by: Union['TrechoOrderByInput', List['TrechoOrderByInput']]
    where: 'TrechoWhereInput'
    cursor: 'TrechoWhereUniqueInput'
    distinct: List['TrechoScalarFieldKeys']
    
    

class AssentoIncludeFromAssento(TypedDict, total=False):
    """Relational arguments for Assento"""
    trecho: Union[bool, 'TrechoArgsFromAssentoRecursive1']
    trechoReservados: Union[bool, 'FindManyTrechoReservadoArgsFromAssentoRecursive1']


class AssentoIncludeFromAssentoRecursive1(TypedDict, total=False):
    """Relational arguments for Assento"""
    trecho: Union[bool, 'TrechoArgsFromAssentoRecursive2']
    trechoReservados: Union[bool, 'FindManyTrechoReservadoArgsFromAssentoRecursive2']


class AssentoIncludeFromAssentoRecursive2(TypedDict, total=False):
    """Relational arguments for Assento"""
    trecho: Union[bool, 'TrechoArgsFromAssentoRecursive3']
    trechoReservados: Union[bool, 'FindManyTrechoReservadoArgsFromAssentoRecursive3']


class AssentoIncludeFromAssentoRecursive3(TypedDict, total=False):
    """Relational arguments for Assento"""
    trecho: Union[bool, 'TrechoArgsFromAssentoRecursive4']
    trechoReservados: Union[bool, 'FindManyTrechoReservadoArgsFromAssentoRecursive4']


class AssentoIncludeFromAssentoRecursive4(TypedDict, total=False):
    """Relational arguments for Assento"""

    

class AssentoArgsFromAssento(TypedDict, total=False):
    """Arguments for Assento"""
    include: 'AssentoIncludeFromAssentoRecursive1'


class AssentoArgsFromAssentoRecursive1(TypedDict, total=False):
    """Arguments for Assento"""
    include: 'AssentoIncludeFromAssentoRecursive2'


class AssentoArgsFromAssentoRecursive2(TypedDict, total=False):
    """Arguments for Assento"""
    include: 'AssentoIncludeFromAssentoRecursive3'


class AssentoArgsFromAssentoRecursive3(TypedDict, total=False):
    """Arguments for Assento"""
    include: 'AssentoIncludeFromAssentoRecursive4'


class AssentoArgsFromAssentoRecursive4(TypedDict, total=False):
    """Arguments for Assento"""
    
    

class FindManyAssentoArgsFromAssento(TypedDict, total=False):
    """Arguments for Assento"""
    take: int
    skip: int
    order_by: Union['AssentoOrderByInput', List['AssentoOrderByInput']]
    where: 'AssentoWhereInput'
    cursor: 'AssentoWhereUniqueInput'
    distinct: List['AssentoScalarFieldKeys']
    include: 'AssentoIncludeFromAssentoRecursive1'


class FindManyAssentoArgsFromAssentoRecursive1(TypedDict, total=False):
    """Arguments for Assento"""
    take: int
    skip: int
    order_by: Union['AssentoOrderByInput', List['AssentoOrderByInput']]
    where: 'AssentoWhereInput'
    cursor: 'AssentoWhereUniqueInput'
    distinct: List['AssentoScalarFieldKeys']
    include: 'AssentoIncludeFromAssentoRecursive2'


class FindManyAssentoArgsFromAssentoRecursive2(TypedDict, total=False):
    """Arguments for Assento"""
    take: int
    skip: int
    order_by: Union['AssentoOrderByInput', List['AssentoOrderByInput']]
    where: 'AssentoWhereInput'
    cursor: 'AssentoWhereUniqueInput'
    distinct: List['AssentoScalarFieldKeys']
    include: 'AssentoIncludeFromAssentoRecursive3'


class FindManyAssentoArgsFromAssentoRecursive3(TypedDict, total=False):
    """Arguments for Assento"""
    take: int
    skip: int
    order_by: Union['AssentoOrderByInput', List['AssentoOrderByInput']]
    where: 'AssentoWhereInput'
    cursor: 'AssentoWhereUniqueInput'
    distinct: List['AssentoScalarFieldKeys']
    include: 'AssentoIncludeFromAssentoRecursive4'


class FindManyAssentoArgsFromAssentoRecursive4(TypedDict, total=False):
    """Arguments for Assento"""
    take: int
    skip: int
    order_by: Union['AssentoOrderByInput', List['AssentoOrderByInput']]
    where: 'AssentoWhereInput'
    cursor: 'AssentoWhereUniqueInput'
    distinct: List['AssentoScalarFieldKeys']
    
    

class TrechoReservadoIncludeFromAssento(TypedDict, total=False):
    """Relational arguments for Assento"""
    passagem: Union[bool, 'PassagemArgsFromAssentoRecursive1']
    trecho: Union[bool, 'TrechoArgsFromAssentoRecursive1']
    assento: Union[bool, 'AssentoArgsFromAssentoRecursive1']


class TrechoReservadoIncludeFromAssentoRecursive1(TypedDict, total=False):
    """Relational arguments for Assento"""
    passagem: Union[bool, 'PassagemArgsFromAssentoRecursive2']
    trecho: Union[bool, 'TrechoArgsFromAssentoRecursive2']
    assento: Union[bool, 'AssentoArgsFromAssentoRecursive2']


class TrechoReservadoIncludeFromAssentoRecursive2(TypedDict, total=False):
    """Relational arguments for Assento"""
    passagem: Union[bool, 'PassagemArgsFromAssentoRecursive3']
    trecho: Union[bool, 'TrechoArgsFromAssentoRecursive3']
    assento: Union[bool, 'AssentoArgsFromAssentoRecursive3']


class TrechoReservadoIncludeFromAssentoRecursive3(TypedDict, total=False):
    """Relational arguments for Assento"""
    passagem: Union[bool, 'PassagemArgsFromAssentoRecursive4']
    trecho: Union[bool, 'TrechoArgsFromAssentoRecursive4']
    assento: Union[bool, 'AssentoArgsFromAssentoRecursive4']


class TrechoReservadoIncludeFromAssentoRecursive4(TypedDict, total=False):
    """Relational arguments for Assento"""

    

class TrechoReservadoArgsFromAssento(TypedDict, total=False):
    """Arguments for Assento"""
    include: 'TrechoReservadoIncludeFromTrechoReservadoRecursive1'


class TrechoReservadoArgsFromAssentoRecursive1(TypedDict, total=False):
    """Arguments for Assento"""
    include: 'TrechoReservadoIncludeFromTrechoReservadoRecursive2'


class TrechoReservadoArgsFromAssentoRecursive2(TypedDict, total=False):
    """Arguments for Assento"""
    include: 'TrechoReservadoIncludeFromTrechoReservadoRecursive3'


class TrechoReservadoArgsFromAssentoRecursive3(TypedDict, total=False):
    """Arguments for Assento"""
    include: 'TrechoReservadoIncludeFromTrechoReservadoRecursive4'


class TrechoReservadoArgsFromAssentoRecursive4(TypedDict, total=False):
    """Arguments for Assento"""
    
    

class FindManyTrechoReservadoArgsFromAssento(TypedDict, total=False):
    """Arguments for Assento"""
    take: int
    skip: int
    order_by: Union['TrechoReservadoOrderByInput', List['TrechoReservadoOrderByInput']]
    where: 'TrechoReservadoWhereInput'
    cursor: 'TrechoReservadoWhereUniqueInput'
    distinct: List['TrechoReservadoScalarFieldKeys']
    include: 'TrechoReservadoIncludeFromTrechoReservadoRecursive1'


class FindManyTrechoReservadoArgsFromAssentoRecursive1(TypedDict, total=False):
    """Arguments for Assento"""
    take: int
    skip: int
    order_by: Union['TrechoReservadoOrderByInput', List['TrechoReservadoOrderByInput']]
    where: 'TrechoReservadoWhereInput'
    cursor: 'TrechoReservadoWhereUniqueInput'
    distinct: List['TrechoReservadoScalarFieldKeys']
    include: 'TrechoReservadoIncludeFromTrechoReservadoRecursive2'


class FindManyTrechoReservadoArgsFromAssentoRecursive2(TypedDict, total=False):
    """Arguments for Assento"""
    take: int
    skip: int
    order_by: Union['TrechoReservadoOrderByInput', List['TrechoReservadoOrderByInput']]
    where: 'TrechoReservadoWhereInput'
    cursor: 'TrechoReservadoWhereUniqueInput'
    distinct: List['TrechoReservadoScalarFieldKeys']
    include: 'TrechoReservadoIncludeFromTrechoReservadoRecursive3'


class FindManyTrechoReservadoArgsFromAssentoRecursive3(TypedDict, total=False):
    """Arguments for Assento"""
    take: int
    skip: int
    order_by: Union['TrechoReservadoOrderByInput', List['TrechoReservadoOrderByInput']]
    where: 'TrechoReservadoWhereInput'
    cursor: 'TrechoReservadoWhereUniqueInput'
    distinct: List['TrechoReservadoScalarFieldKeys']
    include: 'TrechoReservadoIncludeFromTrechoReservadoRecursive4'


class FindManyTrechoReservadoArgsFromAssentoRecursive4(TypedDict, total=False):
    """Arguments for Assento"""
    take: int
    skip: int
    order_by: Union['TrechoReservadoOrderByInput', List['TrechoReservadoOrderByInput']]
    where: 'TrechoReservadoWhereInput'
    cursor: 'TrechoReservadoWhereUniqueInput'
    distinct: List['TrechoReservadoScalarFieldKeys']
    
    

class PassagemIncludeFromAssento(TypedDict, total=False):
    """Relational arguments for Assento"""
    user: Union[bool, 'UserArgsFromAssentoRecursive1']
    trechosReservados: Union[bool, 'FindManyTrechoReservadoArgsFromAssentoRecursive1']


class PassagemIncludeFromAssentoRecursive1(TypedDict, total=False):
    """Relational arguments for Assento"""
    user: Union[bool, 'UserArgsFromAssentoRecursive2']
    trechosReservados: Union[bool, 'FindManyTrechoReservadoArgsFromAssentoRecursive2']


class PassagemIncludeFromAssentoRecursive2(TypedDict, total=False):
    """Relational arguments for Assento"""
    user: Union[bool, 'UserArgsFromAssentoRecursive3']
    trechosReservados: Union[bool, 'FindManyTrechoReservadoArgsFromAssentoRecursive3']


class PassagemIncludeFromAssentoRecursive3(TypedDict, total=False):
    """Relational arguments for Assento"""
    user: Union[bool, 'UserArgsFromAssentoRecursive4']
    trechosReservados: Union[bool, 'FindManyTrechoReservadoArgsFromAssentoRecursive4']


class PassagemIncludeFromAssentoRecursive4(TypedDict, total=False):
    """Relational arguments for Assento"""

    

class PassagemArgsFromAssento(TypedDict, total=False):
    """Arguments for Assento"""
    include: 'PassagemIncludeFromPassagemRecursive1'


class PassagemArgsFromAssentoRecursive1(TypedDict, total=False):
    """Arguments for Assento"""
    include: 'PassagemIncludeFromPassagemRecursive2'


class PassagemArgsFromAssentoRecursive2(TypedDict, total=False):
    """Arguments for Assento"""
    include: 'PassagemIncludeFromPassagemRecursive3'


class PassagemArgsFromAssentoRecursive3(TypedDict, total=False):
    """Arguments for Assento"""
    include: 'PassagemIncludeFromPassagemRecursive4'


class PassagemArgsFromAssentoRecursive4(TypedDict, total=False):
    """Arguments for Assento"""
    
    

class FindManyPassagemArgsFromAssento(TypedDict, total=False):
    """Arguments for Assento"""
    take: int
    skip: int
    order_by: Union['PassagemOrderByInput', List['PassagemOrderByInput']]
    where: 'PassagemWhereInput'
    cursor: 'PassagemWhereUniqueInput'
    distinct: List['PassagemScalarFieldKeys']
    include: 'PassagemIncludeFromPassagemRecursive1'


class FindManyPassagemArgsFromAssentoRecursive1(TypedDict, total=False):
    """Arguments for Assento"""
    take: int
    skip: int
    order_by: Union['PassagemOrderByInput', List['PassagemOrderByInput']]
    where: 'PassagemWhereInput'
    cursor: 'PassagemWhereUniqueInput'
    distinct: List['PassagemScalarFieldKeys']
    include: 'PassagemIncludeFromPassagemRecursive2'


class FindManyPassagemArgsFromAssentoRecursive2(TypedDict, total=False):
    """Arguments for Assento"""
    take: int
    skip: int
    order_by: Union['PassagemOrderByInput', List['PassagemOrderByInput']]
    where: 'PassagemWhereInput'
    cursor: 'PassagemWhereUniqueInput'
    distinct: List['PassagemScalarFieldKeys']
    include: 'PassagemIncludeFromPassagemRecursive3'


class FindManyPassagemArgsFromAssentoRecursive3(TypedDict, total=False):
    """Arguments for Assento"""
    take: int
    skip: int
    order_by: Union['PassagemOrderByInput', List['PassagemOrderByInput']]
    where: 'PassagemWhereInput'
    cursor: 'PassagemWhereUniqueInput'
    distinct: List['PassagemScalarFieldKeys']
    include: 'PassagemIncludeFromPassagemRecursive4'


class FindManyPassagemArgsFromAssentoRecursive4(TypedDict, total=False):
    """Arguments for Assento"""
    take: int
    skip: int
    order_by: Union['PassagemOrderByInput', List['PassagemOrderByInput']]
    where: 'PassagemWhereInput'
    cursor: 'PassagemWhereUniqueInput'
    distinct: List['PassagemScalarFieldKeys']
    
    

class UserIncludeFromAssento(TypedDict, total=False):
    """Relational arguments for Assento"""
    passagens: Union[bool, 'FindManyPassagemArgsFromAssentoRecursive1']


class UserIncludeFromAssentoRecursive1(TypedDict, total=False):
    """Relational arguments for Assento"""
    passagens: Union[bool, 'FindManyPassagemArgsFromAssentoRecursive2']


class UserIncludeFromAssentoRecursive2(TypedDict, total=False):
    """Relational arguments for Assento"""
    passagens: Union[bool, 'FindManyPassagemArgsFromAssentoRecursive3']


class UserIncludeFromAssentoRecursive3(TypedDict, total=False):
    """Relational arguments for Assento"""
    passagens: Union[bool, 'FindManyPassagemArgsFromAssentoRecursive4']


class UserIncludeFromAssentoRecursive4(TypedDict, total=False):
    """Relational arguments for Assento"""

    

class UserArgsFromAssento(TypedDict, total=False):
    """Arguments for Assento"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromAssentoRecursive1(TypedDict, total=False):
    """Arguments for Assento"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromAssentoRecursive2(TypedDict, total=False):
    """Arguments for Assento"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromAssentoRecursive3(TypedDict, total=False):
    """Arguments for Assento"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromAssentoRecursive4(TypedDict, total=False):
    """Arguments for Assento"""
    
    

class FindManyUserArgsFromAssento(TypedDict, total=False):
    """Arguments for Assento"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromAssentoRecursive1(TypedDict, total=False):
    """Arguments for Assento"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromAssentoRecursive2(TypedDict, total=False):
    """Arguments for Assento"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromAssentoRecursive3(TypedDict, total=False):
    """Arguments for Assento"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromAssentoRecursive4(TypedDict, total=False):
    """Arguments for Assento"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    


FindManyAssentoArgs = FindManyAssentoArgsFromAssento
FindFirstAssentoArgs = FindManyAssentoArgsFromAssento


    

class AssentoWhereInput(TypedDict, total=False):
    """Assento arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    numero: Union[_int, 'types.IntFilter']
    trecho: 'TrechoRelationFilter'
    id_trecho: Union[_int, 'types.IntFilter']
    trechoReservados: 'TrechoReservadoListRelationFilter'

    # should be noted that AND and NOT should be Union['AssentoWhereInputRecursive1', List['AssentoWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['AssentoWhereInputRecursive1']
    OR: List['AssentoWhereInputRecursive1']
    NOT: List['AssentoWhereInputRecursive1']


class AssentoWhereInputRecursive1(TypedDict, total=False):
    """Assento arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    numero: Union[_int, 'types.IntFilter']
    trecho: 'TrechoRelationFilter'
    id_trecho: Union[_int, 'types.IntFilter']
    trechoReservados: 'TrechoReservadoListRelationFilter'

    # should be noted that AND and NOT should be Union['AssentoWhereInputRecursive2', List['AssentoWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['AssentoWhereInputRecursive2']
    OR: List['AssentoWhereInputRecursive2']
    NOT: List['AssentoWhereInputRecursive2']


class AssentoWhereInputRecursive2(TypedDict, total=False):
    """Assento arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    numero: Union[_int, 'types.IntFilter']
    trecho: 'TrechoRelationFilter'
    id_trecho: Union[_int, 'types.IntFilter']
    trechoReservados: 'TrechoReservadoListRelationFilter'

    # should be noted that AND and NOT should be Union['AssentoWhereInputRecursive3', List['AssentoWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['AssentoWhereInputRecursive3']
    OR: List['AssentoWhereInputRecursive3']
    NOT: List['AssentoWhereInputRecursive3']


class AssentoWhereInputRecursive3(TypedDict, total=False):
    """Assento arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    numero: Union[_int, 'types.IntFilter']
    trecho: 'TrechoRelationFilter'
    id_trecho: Union[_int, 'types.IntFilter']
    trechoReservados: 'TrechoReservadoListRelationFilter'

    # should be noted that AND and NOT should be Union['AssentoWhereInputRecursive4', List['AssentoWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['AssentoWhereInputRecursive4']
    OR: List['AssentoWhereInputRecursive4']
    NOT: List['AssentoWhereInputRecursive4']


class AssentoWhereInputRecursive4(TypedDict, total=False):
    """Assento arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    numero: Union[_int, 'types.IntFilter']
    trecho: 'TrechoRelationFilter'
    id_trecho: Union[_int, 'types.IntFilter']
    trechoReservados: 'TrechoReservadoListRelationFilter'



# aggregate Assento types


    

class AssentoScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Assento arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    numero: Union[_int, 'types.IntWithAggregatesFilter']
    id_trecho: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['AssentoScalarWhereWithAggregatesInputRecursive1']
    OR: List['AssentoScalarWhereWithAggregatesInputRecursive1']
    NOT: List['AssentoScalarWhereWithAggregatesInputRecursive1']


class AssentoScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Assento arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    numero: Union[_int, 'types.IntWithAggregatesFilter']
    id_trecho: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['AssentoScalarWhereWithAggregatesInputRecursive2']
    OR: List['AssentoScalarWhereWithAggregatesInputRecursive2']
    NOT: List['AssentoScalarWhereWithAggregatesInputRecursive2']


class AssentoScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Assento arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    numero: Union[_int, 'types.IntWithAggregatesFilter']
    id_trecho: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['AssentoScalarWhereWithAggregatesInputRecursive3']
    OR: List['AssentoScalarWhereWithAggregatesInputRecursive3']
    NOT: List['AssentoScalarWhereWithAggregatesInputRecursive3']


class AssentoScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Assento arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    numero: Union[_int, 'types.IntWithAggregatesFilter']
    id_trecho: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['AssentoScalarWhereWithAggregatesInputRecursive4']
    OR: List['AssentoScalarWhereWithAggregatesInputRecursive4']
    NOT: List['AssentoScalarWhereWithAggregatesInputRecursive4']


class AssentoScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Assento arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    numero: Union[_int, 'types.IntWithAggregatesFilter']
    id_trecho: Union[_int, 'types.IntWithAggregatesFilter']



class AssentoGroupByOutput(TypedDict, total=False):
    id: _int
    numero: _int
    id_trecho: _int
    _sum: 'AssentoSumAggregateOutput'
    _avg: 'AssentoAvgAggregateOutput'
    _min: 'AssentoMinAggregateOutput'
    _max: 'AssentoMaxAggregateOutput'
    _count: 'AssentoCountAggregateOutput'


class AssentoAvgAggregateOutput(TypedDict, total=False):
    """Assento output for aggregating averages"""
    id: float
    numero: float
    id_trecho: float


class AssentoSumAggregateOutput(TypedDict, total=False):
    """Assento output for aggregating sums"""
    id: _int
    numero: _int
    id_trecho: _int


class AssentoScalarAggregateOutput(TypedDict, total=False):
    """Assento output including scalar fields"""
    id: _int
    numero: _int
    id_trecho: _int


AssentoMinAggregateOutput = AssentoScalarAggregateOutput
AssentoMaxAggregateOutput = AssentoScalarAggregateOutput


class AssentoMaxAggregateInput(TypedDict, total=False):
    """Assento input for aggregating by max"""
    id: bool
    numero: bool
    id_trecho: bool


class AssentoMinAggregateInput(TypedDict, total=False):
    """Assento input for aggregating by min"""
    id: bool
    numero: bool
    id_trecho: bool


class AssentoNumberAggregateInput(TypedDict, total=False):
    """Assento input for aggregating numbers"""
    id: bool
    numero: bool
    id_trecho: bool


AssentoAvgAggregateInput = AssentoNumberAggregateInput
AssentoSumAggregateInput = AssentoNumberAggregateInput


AssentoCountAggregateInput = TypedDict(
    'AssentoCountAggregateInput',
    {
        'id': bool,
        'numero': bool,
        'id_trecho': bool,
        '_all': bool,
    },
    total=False,
)

AssentoCountAggregateOutput = TypedDict(
    'AssentoCountAggregateOutput',
    {
        'id': int,
        'numero': int,
        'id_trecho': int,
        '_all': int,
    },
    total=False,
)


AssentoKeys = Literal[
    'id',
    'numero',
    'trecho',
    'id_trecho',
    'trechoReservados',
]
AssentoScalarFieldKeys = Literal[
    'id',
    'numero',
    'id_trecho',
]
AssentoScalarFieldKeysT = TypeVar('AssentoScalarFieldKeysT', bound=AssentoScalarFieldKeys)

AssentoRelationalFieldKeys = Literal[
        'trecho',
        'trechoReservados',
    ]

# TrechoReservado types

class TrechoReservadoOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the TrechoReservado create method"""
    id: _int
    passagem: 'PassagemCreateNestedWithoutRelationsInput'
    uuid_passagem: _str
    trecho: 'TrechoCreateNestedWithoutRelationsInput'
    id_trecho: _int
    assento: 'AssentoCreateNestedWithoutRelationsInput'
    id_assento: _int


class TrechoReservadoCreateInput(TrechoReservadoOptionalCreateInput):
    """Required arguments to the TrechoReservado create method"""


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class TrechoReservadoOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the TrechoReservado create method, without relations"""
    id: _int
    uuid_passagem: _str
    id_trecho: _int
    id_assento: _int


class TrechoReservadoCreateWithoutRelationsInput(TrechoReservadoOptionalCreateWithoutRelationsInput):
    """Required arguments to the TrechoReservado create method, without relations"""

class TrechoReservadoConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'TrechoReservadoCreateWithoutRelationsInput'
    where: 'TrechoReservadoWhereUniqueInput'

class TrechoReservadoCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'TrechoReservadoCreateWithoutRelationsInput'
    connect: 'TrechoReservadoWhereUniqueInput'
    connect_or_create: 'TrechoReservadoConnectOrCreateWithoutRelationsInput'


class TrechoReservadoCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['TrechoReservadoCreateWithoutRelationsInput', List['TrechoReservadoCreateWithoutRelationsInput']]
    connect: Union['TrechoReservadoWhereUniqueInput', List['TrechoReservadoWhereUniqueInput']]
    connect_or_create: Union['TrechoReservadoConnectOrCreateWithoutRelationsInput', List['TrechoReservadoConnectOrCreateWithoutRelationsInput']]

_TrechoReservadoWhereUnique_id_Input = TypedDict(
    '_TrechoReservadoWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

TrechoReservadoWhereUniqueInput = _TrechoReservadoWhereUnique_id_Input


class TrechoReservadoUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    passagem: 'PassagemUpdateOneWithoutRelationsInput'
    trecho: 'TrechoUpdateOneWithoutRelationsInput'
    assento: 'AssentoUpdateOneWithoutRelationsInput'


class TrechoReservadoUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]


class TrechoReservadoUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['TrechoReservadoCreateWithoutRelationsInput']
    connect: List['TrechoReservadoWhereUniqueInput']
    connect_or_create: List['TrechoReservadoConnectOrCreateWithoutRelationsInput']
    set: List['TrechoReservadoWhereUniqueInput']
    disconnect: List['TrechoReservadoWhereUniqueInput']
    delete: List['TrechoReservadoWhereUniqueInput']

    # TODO
    # update: List['TrechoReservadoUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['TrechoReservadoUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['TrechoReservadoScalarWhereInput']
    # upsert: List['TrechoReservadoUpserteWithWhereUniqueWithoutRelationsInput']


class TrechoReservadoUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'TrechoReservadoCreateWithoutRelationsInput'
    connect: 'TrechoReservadoWhereUniqueInput'
    connect_or_create: 'TrechoReservadoConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'TrechoReservadoUpdateInput'
    # upsert: 'TrechoReservadoUpsertWithoutRelationsInput'


class TrechoReservadoUpsertInput(TypedDict):
    create: 'TrechoReservadoCreateInput'
    update: 'TrechoReservadoUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_TrechoReservado_id_OrderByInput = TypedDict(
    '_TrechoReservado_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_TrechoReservado_uuid_passagem_OrderByInput = TypedDict(
    '_TrechoReservado_uuid_passagem_OrderByInput',
    {
        'uuid_passagem': 'SortOrder',
    },
    total=True
)

_TrechoReservado_id_trecho_OrderByInput = TypedDict(
    '_TrechoReservado_id_trecho_OrderByInput',
    {
        'id_trecho': 'SortOrder',
    },
    total=True
)

_TrechoReservado_id_assento_OrderByInput = TypedDict(
    '_TrechoReservado_id_assento_OrderByInput',
    {
        'id_assento': 'SortOrder',
    },
    total=True
)

_TrechoReservado_RelevanceInner = TypedDict(
    '_TrechoReservado_RelevanceInner',
    {
        'fields': 'List[TrechoReservadoScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_TrechoReservado_RelevanceOrderByInput = TypedDict(
    '_TrechoReservado_RelevanceOrderByInput',
    {
        '_relevance': '_TrechoReservado_RelevanceInner',
    },
    total=True
)

TrechoReservadoOrderByInput = Union[
    '_TrechoReservado_id_OrderByInput',
    '_TrechoReservado_uuid_passagem_OrderByInput',
    '_TrechoReservado_id_trecho_OrderByInput',
    '_TrechoReservado_id_assento_OrderByInput',
    '_TrechoReservado_RelevanceOrderByInput',
]



# recursive TrechoReservado types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

TrechoReservadoRelationFilter = TypedDict(
    'TrechoReservadoRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class TrechoReservadoListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class TrechoReservadoInclude(TypedDict, total=False):
    """TrechoReservado relational arguments"""
    passagem: Union[bool, 'PassagemArgsFromTrechoReservado']
    trecho: Union[bool, 'TrechoArgsFromTrechoReservado']
    assento: Union[bool, 'AssentoArgsFromTrechoReservado']


    

class TrechoIncludeFromTrechoReservado(TypedDict, total=False):
    """Relational arguments for TrechoReservado"""
    assentos: Union[bool, 'FindManyAssentoArgsFromTrechoReservadoRecursive1']
    trechosReservados: Union[bool, 'FindManyTrechoReservadoArgsFromTrechoReservadoRecursive1']


class TrechoIncludeFromTrechoReservadoRecursive1(TypedDict, total=False):
    """Relational arguments for TrechoReservado"""
    assentos: Union[bool, 'FindManyAssentoArgsFromTrechoReservadoRecursive2']
    trechosReservados: Union[bool, 'FindManyTrechoReservadoArgsFromTrechoReservadoRecursive2']


class TrechoIncludeFromTrechoReservadoRecursive2(TypedDict, total=False):
    """Relational arguments for TrechoReservado"""
    assentos: Union[bool, 'FindManyAssentoArgsFromTrechoReservadoRecursive3']
    trechosReservados: Union[bool, 'FindManyTrechoReservadoArgsFromTrechoReservadoRecursive3']


class TrechoIncludeFromTrechoReservadoRecursive3(TypedDict, total=False):
    """Relational arguments for TrechoReservado"""
    assentos: Union[bool, 'FindManyAssentoArgsFromTrechoReservadoRecursive4']
    trechosReservados: Union[bool, 'FindManyTrechoReservadoArgsFromTrechoReservadoRecursive4']


class TrechoIncludeFromTrechoReservadoRecursive4(TypedDict, total=False):
    """Relational arguments for TrechoReservado"""

    

class TrechoArgsFromTrechoReservado(TypedDict, total=False):
    """Arguments for TrechoReservado"""
    include: 'TrechoIncludeFromTrechoRecursive1'


class TrechoArgsFromTrechoReservadoRecursive1(TypedDict, total=False):
    """Arguments for TrechoReservado"""
    include: 'TrechoIncludeFromTrechoRecursive2'


class TrechoArgsFromTrechoReservadoRecursive2(TypedDict, total=False):
    """Arguments for TrechoReservado"""
    include: 'TrechoIncludeFromTrechoRecursive3'


class TrechoArgsFromTrechoReservadoRecursive3(TypedDict, total=False):
    """Arguments for TrechoReservado"""
    include: 'TrechoIncludeFromTrechoRecursive4'


class TrechoArgsFromTrechoReservadoRecursive4(TypedDict, total=False):
    """Arguments for TrechoReservado"""
    
    

class FindManyTrechoArgsFromTrechoReservado(TypedDict, total=False):
    """Arguments for TrechoReservado"""
    take: int
    skip: int
    order_by: Union['TrechoOrderByInput', List['TrechoOrderByInput']]
    where: 'TrechoWhereInput'
    cursor: 'TrechoWhereUniqueInput'
    distinct: List['TrechoScalarFieldKeys']
    include: 'TrechoIncludeFromTrechoRecursive1'


class FindManyTrechoArgsFromTrechoReservadoRecursive1(TypedDict, total=False):
    """Arguments for TrechoReservado"""
    take: int
    skip: int
    order_by: Union['TrechoOrderByInput', List['TrechoOrderByInput']]
    where: 'TrechoWhereInput'
    cursor: 'TrechoWhereUniqueInput'
    distinct: List['TrechoScalarFieldKeys']
    include: 'TrechoIncludeFromTrechoRecursive2'


class FindManyTrechoArgsFromTrechoReservadoRecursive2(TypedDict, total=False):
    """Arguments for TrechoReservado"""
    take: int
    skip: int
    order_by: Union['TrechoOrderByInput', List['TrechoOrderByInput']]
    where: 'TrechoWhereInput'
    cursor: 'TrechoWhereUniqueInput'
    distinct: List['TrechoScalarFieldKeys']
    include: 'TrechoIncludeFromTrechoRecursive3'


class FindManyTrechoArgsFromTrechoReservadoRecursive3(TypedDict, total=False):
    """Arguments for TrechoReservado"""
    take: int
    skip: int
    order_by: Union['TrechoOrderByInput', List['TrechoOrderByInput']]
    where: 'TrechoWhereInput'
    cursor: 'TrechoWhereUniqueInput'
    distinct: List['TrechoScalarFieldKeys']
    include: 'TrechoIncludeFromTrechoRecursive4'


class FindManyTrechoArgsFromTrechoReservadoRecursive4(TypedDict, total=False):
    """Arguments for TrechoReservado"""
    take: int
    skip: int
    order_by: Union['TrechoOrderByInput', List['TrechoOrderByInput']]
    where: 'TrechoWhereInput'
    cursor: 'TrechoWhereUniqueInput'
    distinct: List['TrechoScalarFieldKeys']
    
    

class AssentoIncludeFromTrechoReservado(TypedDict, total=False):
    """Relational arguments for TrechoReservado"""
    trecho: Union[bool, 'TrechoArgsFromTrechoReservadoRecursive1']
    trechoReservados: Union[bool, 'FindManyTrechoReservadoArgsFromTrechoReservadoRecursive1']


class AssentoIncludeFromTrechoReservadoRecursive1(TypedDict, total=False):
    """Relational arguments for TrechoReservado"""
    trecho: Union[bool, 'TrechoArgsFromTrechoReservadoRecursive2']
    trechoReservados: Union[bool, 'FindManyTrechoReservadoArgsFromTrechoReservadoRecursive2']


class AssentoIncludeFromTrechoReservadoRecursive2(TypedDict, total=False):
    """Relational arguments for TrechoReservado"""
    trecho: Union[bool, 'TrechoArgsFromTrechoReservadoRecursive3']
    trechoReservados: Union[bool, 'FindManyTrechoReservadoArgsFromTrechoReservadoRecursive3']


class AssentoIncludeFromTrechoReservadoRecursive3(TypedDict, total=False):
    """Relational arguments for TrechoReservado"""
    trecho: Union[bool, 'TrechoArgsFromTrechoReservadoRecursive4']
    trechoReservados: Union[bool, 'FindManyTrechoReservadoArgsFromTrechoReservadoRecursive4']


class AssentoIncludeFromTrechoReservadoRecursive4(TypedDict, total=False):
    """Relational arguments for TrechoReservado"""

    

class AssentoArgsFromTrechoReservado(TypedDict, total=False):
    """Arguments for TrechoReservado"""
    include: 'AssentoIncludeFromAssentoRecursive1'


class AssentoArgsFromTrechoReservadoRecursive1(TypedDict, total=False):
    """Arguments for TrechoReservado"""
    include: 'AssentoIncludeFromAssentoRecursive2'


class AssentoArgsFromTrechoReservadoRecursive2(TypedDict, total=False):
    """Arguments for TrechoReservado"""
    include: 'AssentoIncludeFromAssentoRecursive3'


class AssentoArgsFromTrechoReservadoRecursive3(TypedDict, total=False):
    """Arguments for TrechoReservado"""
    include: 'AssentoIncludeFromAssentoRecursive4'


class AssentoArgsFromTrechoReservadoRecursive4(TypedDict, total=False):
    """Arguments for TrechoReservado"""
    
    

class FindManyAssentoArgsFromTrechoReservado(TypedDict, total=False):
    """Arguments for TrechoReservado"""
    take: int
    skip: int
    order_by: Union['AssentoOrderByInput', List['AssentoOrderByInput']]
    where: 'AssentoWhereInput'
    cursor: 'AssentoWhereUniqueInput'
    distinct: List['AssentoScalarFieldKeys']
    include: 'AssentoIncludeFromAssentoRecursive1'


class FindManyAssentoArgsFromTrechoReservadoRecursive1(TypedDict, total=False):
    """Arguments for TrechoReservado"""
    take: int
    skip: int
    order_by: Union['AssentoOrderByInput', List['AssentoOrderByInput']]
    where: 'AssentoWhereInput'
    cursor: 'AssentoWhereUniqueInput'
    distinct: List['AssentoScalarFieldKeys']
    include: 'AssentoIncludeFromAssentoRecursive2'


class FindManyAssentoArgsFromTrechoReservadoRecursive2(TypedDict, total=False):
    """Arguments for TrechoReservado"""
    take: int
    skip: int
    order_by: Union['AssentoOrderByInput', List['AssentoOrderByInput']]
    where: 'AssentoWhereInput'
    cursor: 'AssentoWhereUniqueInput'
    distinct: List['AssentoScalarFieldKeys']
    include: 'AssentoIncludeFromAssentoRecursive3'


class FindManyAssentoArgsFromTrechoReservadoRecursive3(TypedDict, total=False):
    """Arguments for TrechoReservado"""
    take: int
    skip: int
    order_by: Union['AssentoOrderByInput', List['AssentoOrderByInput']]
    where: 'AssentoWhereInput'
    cursor: 'AssentoWhereUniqueInput'
    distinct: List['AssentoScalarFieldKeys']
    include: 'AssentoIncludeFromAssentoRecursive4'


class FindManyAssentoArgsFromTrechoReservadoRecursive4(TypedDict, total=False):
    """Arguments for TrechoReservado"""
    take: int
    skip: int
    order_by: Union['AssentoOrderByInput', List['AssentoOrderByInput']]
    where: 'AssentoWhereInput'
    cursor: 'AssentoWhereUniqueInput'
    distinct: List['AssentoScalarFieldKeys']
    
    

class TrechoReservadoIncludeFromTrechoReservado(TypedDict, total=False):
    """Relational arguments for TrechoReservado"""
    passagem: Union[bool, 'PassagemArgsFromTrechoReservadoRecursive1']
    trecho: Union[bool, 'TrechoArgsFromTrechoReservadoRecursive1']
    assento: Union[bool, 'AssentoArgsFromTrechoReservadoRecursive1']


class TrechoReservadoIncludeFromTrechoReservadoRecursive1(TypedDict, total=False):
    """Relational arguments for TrechoReservado"""
    passagem: Union[bool, 'PassagemArgsFromTrechoReservadoRecursive2']
    trecho: Union[bool, 'TrechoArgsFromTrechoReservadoRecursive2']
    assento: Union[bool, 'AssentoArgsFromTrechoReservadoRecursive2']


class TrechoReservadoIncludeFromTrechoReservadoRecursive2(TypedDict, total=False):
    """Relational arguments for TrechoReservado"""
    passagem: Union[bool, 'PassagemArgsFromTrechoReservadoRecursive3']
    trecho: Union[bool, 'TrechoArgsFromTrechoReservadoRecursive3']
    assento: Union[bool, 'AssentoArgsFromTrechoReservadoRecursive3']


class TrechoReservadoIncludeFromTrechoReservadoRecursive3(TypedDict, total=False):
    """Relational arguments for TrechoReservado"""
    passagem: Union[bool, 'PassagemArgsFromTrechoReservadoRecursive4']
    trecho: Union[bool, 'TrechoArgsFromTrechoReservadoRecursive4']
    assento: Union[bool, 'AssentoArgsFromTrechoReservadoRecursive4']


class TrechoReservadoIncludeFromTrechoReservadoRecursive4(TypedDict, total=False):
    """Relational arguments for TrechoReservado"""

    

class TrechoReservadoArgsFromTrechoReservado(TypedDict, total=False):
    """Arguments for TrechoReservado"""
    include: 'TrechoReservadoIncludeFromTrechoReservadoRecursive1'


class TrechoReservadoArgsFromTrechoReservadoRecursive1(TypedDict, total=False):
    """Arguments for TrechoReservado"""
    include: 'TrechoReservadoIncludeFromTrechoReservadoRecursive2'


class TrechoReservadoArgsFromTrechoReservadoRecursive2(TypedDict, total=False):
    """Arguments for TrechoReservado"""
    include: 'TrechoReservadoIncludeFromTrechoReservadoRecursive3'


class TrechoReservadoArgsFromTrechoReservadoRecursive3(TypedDict, total=False):
    """Arguments for TrechoReservado"""
    include: 'TrechoReservadoIncludeFromTrechoReservadoRecursive4'


class TrechoReservadoArgsFromTrechoReservadoRecursive4(TypedDict, total=False):
    """Arguments for TrechoReservado"""
    
    

class FindManyTrechoReservadoArgsFromTrechoReservado(TypedDict, total=False):
    """Arguments for TrechoReservado"""
    take: int
    skip: int
    order_by: Union['TrechoReservadoOrderByInput', List['TrechoReservadoOrderByInput']]
    where: 'TrechoReservadoWhereInput'
    cursor: 'TrechoReservadoWhereUniqueInput'
    distinct: List['TrechoReservadoScalarFieldKeys']
    include: 'TrechoReservadoIncludeFromTrechoReservadoRecursive1'


class FindManyTrechoReservadoArgsFromTrechoReservadoRecursive1(TypedDict, total=False):
    """Arguments for TrechoReservado"""
    take: int
    skip: int
    order_by: Union['TrechoReservadoOrderByInput', List['TrechoReservadoOrderByInput']]
    where: 'TrechoReservadoWhereInput'
    cursor: 'TrechoReservadoWhereUniqueInput'
    distinct: List['TrechoReservadoScalarFieldKeys']
    include: 'TrechoReservadoIncludeFromTrechoReservadoRecursive2'


class FindManyTrechoReservadoArgsFromTrechoReservadoRecursive2(TypedDict, total=False):
    """Arguments for TrechoReservado"""
    take: int
    skip: int
    order_by: Union['TrechoReservadoOrderByInput', List['TrechoReservadoOrderByInput']]
    where: 'TrechoReservadoWhereInput'
    cursor: 'TrechoReservadoWhereUniqueInput'
    distinct: List['TrechoReservadoScalarFieldKeys']
    include: 'TrechoReservadoIncludeFromTrechoReservadoRecursive3'


class FindManyTrechoReservadoArgsFromTrechoReservadoRecursive3(TypedDict, total=False):
    """Arguments for TrechoReservado"""
    take: int
    skip: int
    order_by: Union['TrechoReservadoOrderByInput', List['TrechoReservadoOrderByInput']]
    where: 'TrechoReservadoWhereInput'
    cursor: 'TrechoReservadoWhereUniqueInput'
    distinct: List['TrechoReservadoScalarFieldKeys']
    include: 'TrechoReservadoIncludeFromTrechoReservadoRecursive4'


class FindManyTrechoReservadoArgsFromTrechoReservadoRecursive4(TypedDict, total=False):
    """Arguments for TrechoReservado"""
    take: int
    skip: int
    order_by: Union['TrechoReservadoOrderByInput', List['TrechoReservadoOrderByInput']]
    where: 'TrechoReservadoWhereInput'
    cursor: 'TrechoReservadoWhereUniqueInput'
    distinct: List['TrechoReservadoScalarFieldKeys']
    
    

class PassagemIncludeFromTrechoReservado(TypedDict, total=False):
    """Relational arguments for TrechoReservado"""
    user: Union[bool, 'UserArgsFromTrechoReservadoRecursive1']
    trechosReservados: Union[bool, 'FindManyTrechoReservadoArgsFromTrechoReservadoRecursive1']


class PassagemIncludeFromTrechoReservadoRecursive1(TypedDict, total=False):
    """Relational arguments for TrechoReservado"""
    user: Union[bool, 'UserArgsFromTrechoReservadoRecursive2']
    trechosReservados: Union[bool, 'FindManyTrechoReservadoArgsFromTrechoReservadoRecursive2']


class PassagemIncludeFromTrechoReservadoRecursive2(TypedDict, total=False):
    """Relational arguments for TrechoReservado"""
    user: Union[bool, 'UserArgsFromTrechoReservadoRecursive3']
    trechosReservados: Union[bool, 'FindManyTrechoReservadoArgsFromTrechoReservadoRecursive3']


class PassagemIncludeFromTrechoReservadoRecursive3(TypedDict, total=False):
    """Relational arguments for TrechoReservado"""
    user: Union[bool, 'UserArgsFromTrechoReservadoRecursive4']
    trechosReservados: Union[bool, 'FindManyTrechoReservadoArgsFromTrechoReservadoRecursive4']


class PassagemIncludeFromTrechoReservadoRecursive4(TypedDict, total=False):
    """Relational arguments for TrechoReservado"""

    

class PassagemArgsFromTrechoReservado(TypedDict, total=False):
    """Arguments for TrechoReservado"""
    include: 'PassagemIncludeFromPassagemRecursive1'


class PassagemArgsFromTrechoReservadoRecursive1(TypedDict, total=False):
    """Arguments for TrechoReservado"""
    include: 'PassagemIncludeFromPassagemRecursive2'


class PassagemArgsFromTrechoReservadoRecursive2(TypedDict, total=False):
    """Arguments for TrechoReservado"""
    include: 'PassagemIncludeFromPassagemRecursive3'


class PassagemArgsFromTrechoReservadoRecursive3(TypedDict, total=False):
    """Arguments for TrechoReservado"""
    include: 'PassagemIncludeFromPassagemRecursive4'


class PassagemArgsFromTrechoReservadoRecursive4(TypedDict, total=False):
    """Arguments for TrechoReservado"""
    
    

class FindManyPassagemArgsFromTrechoReservado(TypedDict, total=False):
    """Arguments for TrechoReservado"""
    take: int
    skip: int
    order_by: Union['PassagemOrderByInput', List['PassagemOrderByInput']]
    where: 'PassagemWhereInput'
    cursor: 'PassagemWhereUniqueInput'
    distinct: List['PassagemScalarFieldKeys']
    include: 'PassagemIncludeFromPassagemRecursive1'


class FindManyPassagemArgsFromTrechoReservadoRecursive1(TypedDict, total=False):
    """Arguments for TrechoReservado"""
    take: int
    skip: int
    order_by: Union['PassagemOrderByInput', List['PassagemOrderByInput']]
    where: 'PassagemWhereInput'
    cursor: 'PassagemWhereUniqueInput'
    distinct: List['PassagemScalarFieldKeys']
    include: 'PassagemIncludeFromPassagemRecursive2'


class FindManyPassagemArgsFromTrechoReservadoRecursive2(TypedDict, total=False):
    """Arguments for TrechoReservado"""
    take: int
    skip: int
    order_by: Union['PassagemOrderByInput', List['PassagemOrderByInput']]
    where: 'PassagemWhereInput'
    cursor: 'PassagemWhereUniqueInput'
    distinct: List['PassagemScalarFieldKeys']
    include: 'PassagemIncludeFromPassagemRecursive3'


class FindManyPassagemArgsFromTrechoReservadoRecursive3(TypedDict, total=False):
    """Arguments for TrechoReservado"""
    take: int
    skip: int
    order_by: Union['PassagemOrderByInput', List['PassagemOrderByInput']]
    where: 'PassagemWhereInput'
    cursor: 'PassagemWhereUniqueInput'
    distinct: List['PassagemScalarFieldKeys']
    include: 'PassagemIncludeFromPassagemRecursive4'


class FindManyPassagemArgsFromTrechoReservadoRecursive4(TypedDict, total=False):
    """Arguments for TrechoReservado"""
    take: int
    skip: int
    order_by: Union['PassagemOrderByInput', List['PassagemOrderByInput']]
    where: 'PassagemWhereInput'
    cursor: 'PassagemWhereUniqueInput'
    distinct: List['PassagemScalarFieldKeys']
    
    

class UserIncludeFromTrechoReservado(TypedDict, total=False):
    """Relational arguments for TrechoReservado"""
    passagens: Union[bool, 'FindManyPassagemArgsFromTrechoReservadoRecursive1']


class UserIncludeFromTrechoReservadoRecursive1(TypedDict, total=False):
    """Relational arguments for TrechoReservado"""
    passagens: Union[bool, 'FindManyPassagemArgsFromTrechoReservadoRecursive2']


class UserIncludeFromTrechoReservadoRecursive2(TypedDict, total=False):
    """Relational arguments for TrechoReservado"""
    passagens: Union[bool, 'FindManyPassagemArgsFromTrechoReservadoRecursive3']


class UserIncludeFromTrechoReservadoRecursive3(TypedDict, total=False):
    """Relational arguments for TrechoReservado"""
    passagens: Union[bool, 'FindManyPassagemArgsFromTrechoReservadoRecursive4']


class UserIncludeFromTrechoReservadoRecursive4(TypedDict, total=False):
    """Relational arguments for TrechoReservado"""

    

class UserArgsFromTrechoReservado(TypedDict, total=False):
    """Arguments for TrechoReservado"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromTrechoReservadoRecursive1(TypedDict, total=False):
    """Arguments for TrechoReservado"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromTrechoReservadoRecursive2(TypedDict, total=False):
    """Arguments for TrechoReservado"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromTrechoReservadoRecursive3(TypedDict, total=False):
    """Arguments for TrechoReservado"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromTrechoReservadoRecursive4(TypedDict, total=False):
    """Arguments for TrechoReservado"""
    
    

class FindManyUserArgsFromTrechoReservado(TypedDict, total=False):
    """Arguments for TrechoReservado"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromTrechoReservadoRecursive1(TypedDict, total=False):
    """Arguments for TrechoReservado"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromTrechoReservadoRecursive2(TypedDict, total=False):
    """Arguments for TrechoReservado"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromTrechoReservadoRecursive3(TypedDict, total=False):
    """Arguments for TrechoReservado"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromTrechoReservadoRecursive4(TypedDict, total=False):
    """Arguments for TrechoReservado"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    


FindManyTrechoReservadoArgs = FindManyTrechoReservadoArgsFromTrechoReservado
FindFirstTrechoReservadoArgs = FindManyTrechoReservadoArgsFromTrechoReservado


    

class TrechoReservadoWhereInput(TypedDict, total=False):
    """TrechoReservado arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    passagem: 'PassagemRelationFilter'
    uuid_passagem: Union[_str, 'types.StringFilter']
    trecho: 'TrechoRelationFilter'
    id_trecho: Union[_int, 'types.IntFilter']
    assento: 'AssentoRelationFilter'
    id_assento: Union[_int, 'types.IntFilter']

    # should be noted that AND and NOT should be Union['TrechoReservadoWhereInputRecursive1', List['TrechoReservadoWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['TrechoReservadoWhereInputRecursive1']
    OR: List['TrechoReservadoWhereInputRecursive1']
    NOT: List['TrechoReservadoWhereInputRecursive1']


class TrechoReservadoWhereInputRecursive1(TypedDict, total=False):
    """TrechoReservado arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    passagem: 'PassagemRelationFilter'
    uuid_passagem: Union[_str, 'types.StringFilter']
    trecho: 'TrechoRelationFilter'
    id_trecho: Union[_int, 'types.IntFilter']
    assento: 'AssentoRelationFilter'
    id_assento: Union[_int, 'types.IntFilter']

    # should be noted that AND and NOT should be Union['TrechoReservadoWhereInputRecursive2', List['TrechoReservadoWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['TrechoReservadoWhereInputRecursive2']
    OR: List['TrechoReservadoWhereInputRecursive2']
    NOT: List['TrechoReservadoWhereInputRecursive2']


class TrechoReservadoWhereInputRecursive2(TypedDict, total=False):
    """TrechoReservado arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    passagem: 'PassagemRelationFilter'
    uuid_passagem: Union[_str, 'types.StringFilter']
    trecho: 'TrechoRelationFilter'
    id_trecho: Union[_int, 'types.IntFilter']
    assento: 'AssentoRelationFilter'
    id_assento: Union[_int, 'types.IntFilter']

    # should be noted that AND and NOT should be Union['TrechoReservadoWhereInputRecursive3', List['TrechoReservadoWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['TrechoReservadoWhereInputRecursive3']
    OR: List['TrechoReservadoWhereInputRecursive3']
    NOT: List['TrechoReservadoWhereInputRecursive3']


class TrechoReservadoWhereInputRecursive3(TypedDict, total=False):
    """TrechoReservado arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    passagem: 'PassagemRelationFilter'
    uuid_passagem: Union[_str, 'types.StringFilter']
    trecho: 'TrechoRelationFilter'
    id_trecho: Union[_int, 'types.IntFilter']
    assento: 'AssentoRelationFilter'
    id_assento: Union[_int, 'types.IntFilter']

    # should be noted that AND and NOT should be Union['TrechoReservadoWhereInputRecursive4', List['TrechoReservadoWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['TrechoReservadoWhereInputRecursive4']
    OR: List['TrechoReservadoWhereInputRecursive4']
    NOT: List['TrechoReservadoWhereInputRecursive4']


class TrechoReservadoWhereInputRecursive4(TypedDict, total=False):
    """TrechoReservado arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    passagem: 'PassagemRelationFilter'
    uuid_passagem: Union[_str, 'types.StringFilter']
    trecho: 'TrechoRelationFilter'
    id_trecho: Union[_int, 'types.IntFilter']
    assento: 'AssentoRelationFilter'
    id_assento: Union[_int, 'types.IntFilter']



# aggregate TrechoReservado types


    

class TrechoReservadoScalarWhereWithAggregatesInput(TypedDict, total=False):
    """TrechoReservado arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    uuid_passagem: Union[_str, 'types.StringWithAggregatesFilter']
    id_trecho: Union[_int, 'types.IntWithAggregatesFilter']
    id_assento: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['TrechoReservadoScalarWhereWithAggregatesInputRecursive1']
    OR: List['TrechoReservadoScalarWhereWithAggregatesInputRecursive1']
    NOT: List['TrechoReservadoScalarWhereWithAggregatesInputRecursive1']


class TrechoReservadoScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """TrechoReservado arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    uuid_passagem: Union[_str, 'types.StringWithAggregatesFilter']
    id_trecho: Union[_int, 'types.IntWithAggregatesFilter']
    id_assento: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['TrechoReservadoScalarWhereWithAggregatesInputRecursive2']
    OR: List['TrechoReservadoScalarWhereWithAggregatesInputRecursive2']
    NOT: List['TrechoReservadoScalarWhereWithAggregatesInputRecursive2']


class TrechoReservadoScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """TrechoReservado arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    uuid_passagem: Union[_str, 'types.StringWithAggregatesFilter']
    id_trecho: Union[_int, 'types.IntWithAggregatesFilter']
    id_assento: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['TrechoReservadoScalarWhereWithAggregatesInputRecursive3']
    OR: List['TrechoReservadoScalarWhereWithAggregatesInputRecursive3']
    NOT: List['TrechoReservadoScalarWhereWithAggregatesInputRecursive3']


class TrechoReservadoScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """TrechoReservado arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    uuid_passagem: Union[_str, 'types.StringWithAggregatesFilter']
    id_trecho: Union[_int, 'types.IntWithAggregatesFilter']
    id_assento: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['TrechoReservadoScalarWhereWithAggregatesInputRecursive4']
    OR: List['TrechoReservadoScalarWhereWithAggregatesInputRecursive4']
    NOT: List['TrechoReservadoScalarWhereWithAggregatesInputRecursive4']


class TrechoReservadoScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """TrechoReservado arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    uuid_passagem: Union[_str, 'types.StringWithAggregatesFilter']
    id_trecho: Union[_int, 'types.IntWithAggregatesFilter']
    id_assento: Union[_int, 'types.IntWithAggregatesFilter']



class TrechoReservadoGroupByOutput(TypedDict, total=False):
    id: _int
    uuid_passagem: _str
    id_trecho: _int
    id_assento: _int
    _sum: 'TrechoReservadoSumAggregateOutput'
    _avg: 'TrechoReservadoAvgAggregateOutput'
    _min: 'TrechoReservadoMinAggregateOutput'
    _max: 'TrechoReservadoMaxAggregateOutput'
    _count: 'TrechoReservadoCountAggregateOutput'


class TrechoReservadoAvgAggregateOutput(TypedDict, total=False):
    """TrechoReservado output for aggregating averages"""
    id: float
    id_trecho: float
    id_assento: float


class TrechoReservadoSumAggregateOutput(TypedDict, total=False):
    """TrechoReservado output for aggregating sums"""
    id: _int
    id_trecho: _int
    id_assento: _int


class TrechoReservadoScalarAggregateOutput(TypedDict, total=False):
    """TrechoReservado output including scalar fields"""
    id: _int
    uuid_passagem: _str
    id_trecho: _int
    id_assento: _int


TrechoReservadoMinAggregateOutput = TrechoReservadoScalarAggregateOutput
TrechoReservadoMaxAggregateOutput = TrechoReservadoScalarAggregateOutput


class TrechoReservadoMaxAggregateInput(TypedDict, total=False):
    """TrechoReservado input for aggregating by max"""
    id: bool
    uuid_passagem: bool
    id_trecho: bool
    id_assento: bool


class TrechoReservadoMinAggregateInput(TypedDict, total=False):
    """TrechoReservado input for aggregating by min"""
    id: bool
    uuid_passagem: bool
    id_trecho: bool
    id_assento: bool


class TrechoReservadoNumberAggregateInput(TypedDict, total=False):
    """TrechoReservado input for aggregating numbers"""
    id: bool
    id_trecho: bool
    id_assento: bool


TrechoReservadoAvgAggregateInput = TrechoReservadoNumberAggregateInput
TrechoReservadoSumAggregateInput = TrechoReservadoNumberAggregateInput


TrechoReservadoCountAggregateInput = TypedDict(
    'TrechoReservadoCountAggregateInput',
    {
        'id': bool,
        'uuid_passagem': bool,
        'id_trecho': bool,
        'id_assento': bool,
        '_all': bool,
    },
    total=False,
)

TrechoReservadoCountAggregateOutput = TypedDict(
    'TrechoReservadoCountAggregateOutput',
    {
        'id': int,
        'uuid_passagem': int,
        'id_trecho': int,
        'id_assento': int,
        '_all': int,
    },
    total=False,
)


TrechoReservadoKeys = Literal[
    'id',
    'passagem',
    'uuid_passagem',
    'trecho',
    'id_trecho',
    'assento',
    'id_assento',
]
TrechoReservadoScalarFieldKeys = Literal[
    'id',
    'uuid_passagem',
    'id_trecho',
    'id_assento',
]
TrechoReservadoScalarFieldKeysT = TypeVar('TrechoReservadoScalarFieldKeysT', bound=TrechoReservadoScalarFieldKeys)

TrechoReservadoRelationalFieldKeys = Literal[
        'passagem',
        'trecho',
        'assento',
    ]

# Passagem types

class PassagemOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Passagem create method"""
    uuid: _str
    user: 'UserCreateNestedWithoutRelationsInput'
    user_id: _int
    created_at: datetime.datetime
    trechosReservados: 'TrechoReservadoCreateManyNestedWithoutRelationsInput'


class PassagemCreateInput(PassagemOptionalCreateInput):
    """Required arguments to the Passagem create method"""


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class PassagemOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Passagem create method, without relations"""
    uuid: _str
    user_id: _int
    created_at: datetime.datetime


class PassagemCreateWithoutRelationsInput(PassagemOptionalCreateWithoutRelationsInput):
    """Required arguments to the Passagem create method, without relations"""

class PassagemConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'PassagemCreateWithoutRelationsInput'
    where: 'PassagemWhereUniqueInput'

class PassagemCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'PassagemCreateWithoutRelationsInput'
    connect: 'PassagemWhereUniqueInput'
    connect_or_create: 'PassagemConnectOrCreateWithoutRelationsInput'


class PassagemCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['PassagemCreateWithoutRelationsInput', List['PassagemCreateWithoutRelationsInput']]
    connect: Union['PassagemWhereUniqueInput', List['PassagemWhereUniqueInput']]
    connect_or_create: Union['PassagemConnectOrCreateWithoutRelationsInput', List['PassagemConnectOrCreateWithoutRelationsInput']]

_PassagemWhereUnique_uuid_Input = TypedDict(
    '_PassagemWhereUnique_uuid_Input',
    {
        'uuid': '_str',
    },
    total=True
)

PassagemWhereUniqueInput = _PassagemWhereUnique_uuid_Input


class PassagemUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    uuid: _str
    user: 'UserUpdateOneWithoutRelationsInput'
    created_at: datetime.datetime
    trechosReservados: 'TrechoReservadoUpdateManyWithoutRelationsInput'


class PassagemUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    uuid: _str
    created_at: datetime.datetime


class PassagemUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['PassagemCreateWithoutRelationsInput']
    connect: List['PassagemWhereUniqueInput']
    connect_or_create: List['PassagemConnectOrCreateWithoutRelationsInput']
    set: List['PassagemWhereUniqueInput']
    disconnect: List['PassagemWhereUniqueInput']
    delete: List['PassagemWhereUniqueInput']

    # TODO
    # update: List['PassagemUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['PassagemUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['PassagemScalarWhereInput']
    # upsert: List['PassagemUpserteWithWhereUniqueWithoutRelationsInput']


class PassagemUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'PassagemCreateWithoutRelationsInput'
    connect: 'PassagemWhereUniqueInput'
    connect_or_create: 'PassagemConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'PassagemUpdateInput'
    # upsert: 'PassagemUpsertWithoutRelationsInput'


class PassagemUpsertInput(TypedDict):
    create: 'PassagemCreateInput'
    update: 'PassagemUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Passagem_uuid_OrderByInput = TypedDict(
    '_Passagem_uuid_OrderByInput',
    {
        'uuid': 'SortOrder',
    },
    total=True
)

_Passagem_user_id_OrderByInput = TypedDict(
    '_Passagem_user_id_OrderByInput',
    {
        'user_id': 'SortOrder',
    },
    total=True
)

_Passagem_created_at_OrderByInput = TypedDict(
    '_Passagem_created_at_OrderByInput',
    {
        'created_at': 'SortOrder',
    },
    total=True
)

_Passagem_RelevanceInner = TypedDict(
    '_Passagem_RelevanceInner',
    {
        'fields': 'List[PassagemScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Passagem_RelevanceOrderByInput = TypedDict(
    '_Passagem_RelevanceOrderByInput',
    {
        '_relevance': '_Passagem_RelevanceInner',
    },
    total=True
)

PassagemOrderByInput = Union[
    '_Passagem_uuid_OrderByInput',
    '_Passagem_user_id_OrderByInput',
    '_Passagem_created_at_OrderByInput',
    '_Passagem_RelevanceOrderByInput',
]



# recursive Passagem types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

PassagemRelationFilter = TypedDict(
    'PassagemRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class PassagemListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class PassagemInclude(TypedDict, total=False):
    """Passagem relational arguments"""
    user: Union[bool, 'UserArgsFromPassagem']
    trechosReservados: Union[bool, 'FindManyTrechoReservadoArgsFromPassagem']


    

class TrechoIncludeFromPassagem(TypedDict, total=False):
    """Relational arguments for Passagem"""
    assentos: Union[bool, 'FindManyAssentoArgsFromPassagemRecursive1']
    trechosReservados: Union[bool, 'FindManyTrechoReservadoArgsFromPassagemRecursive1']


class TrechoIncludeFromPassagemRecursive1(TypedDict, total=False):
    """Relational arguments for Passagem"""
    assentos: Union[bool, 'FindManyAssentoArgsFromPassagemRecursive2']
    trechosReservados: Union[bool, 'FindManyTrechoReservadoArgsFromPassagemRecursive2']


class TrechoIncludeFromPassagemRecursive2(TypedDict, total=False):
    """Relational arguments for Passagem"""
    assentos: Union[bool, 'FindManyAssentoArgsFromPassagemRecursive3']
    trechosReservados: Union[bool, 'FindManyTrechoReservadoArgsFromPassagemRecursive3']


class TrechoIncludeFromPassagemRecursive3(TypedDict, total=False):
    """Relational arguments for Passagem"""
    assentos: Union[bool, 'FindManyAssentoArgsFromPassagemRecursive4']
    trechosReservados: Union[bool, 'FindManyTrechoReservadoArgsFromPassagemRecursive4']


class TrechoIncludeFromPassagemRecursive4(TypedDict, total=False):
    """Relational arguments for Passagem"""

    

class TrechoArgsFromPassagem(TypedDict, total=False):
    """Arguments for Passagem"""
    include: 'TrechoIncludeFromTrechoRecursive1'


class TrechoArgsFromPassagemRecursive1(TypedDict, total=False):
    """Arguments for Passagem"""
    include: 'TrechoIncludeFromTrechoRecursive2'


class TrechoArgsFromPassagemRecursive2(TypedDict, total=False):
    """Arguments for Passagem"""
    include: 'TrechoIncludeFromTrechoRecursive3'


class TrechoArgsFromPassagemRecursive3(TypedDict, total=False):
    """Arguments for Passagem"""
    include: 'TrechoIncludeFromTrechoRecursive4'


class TrechoArgsFromPassagemRecursive4(TypedDict, total=False):
    """Arguments for Passagem"""
    
    

class FindManyTrechoArgsFromPassagem(TypedDict, total=False):
    """Arguments for Passagem"""
    take: int
    skip: int
    order_by: Union['TrechoOrderByInput', List['TrechoOrderByInput']]
    where: 'TrechoWhereInput'
    cursor: 'TrechoWhereUniqueInput'
    distinct: List['TrechoScalarFieldKeys']
    include: 'TrechoIncludeFromTrechoRecursive1'


class FindManyTrechoArgsFromPassagemRecursive1(TypedDict, total=False):
    """Arguments for Passagem"""
    take: int
    skip: int
    order_by: Union['TrechoOrderByInput', List['TrechoOrderByInput']]
    where: 'TrechoWhereInput'
    cursor: 'TrechoWhereUniqueInput'
    distinct: List['TrechoScalarFieldKeys']
    include: 'TrechoIncludeFromTrechoRecursive2'


class FindManyTrechoArgsFromPassagemRecursive2(TypedDict, total=False):
    """Arguments for Passagem"""
    take: int
    skip: int
    order_by: Union['TrechoOrderByInput', List['TrechoOrderByInput']]
    where: 'TrechoWhereInput'
    cursor: 'TrechoWhereUniqueInput'
    distinct: List['TrechoScalarFieldKeys']
    include: 'TrechoIncludeFromTrechoRecursive3'


class FindManyTrechoArgsFromPassagemRecursive3(TypedDict, total=False):
    """Arguments for Passagem"""
    take: int
    skip: int
    order_by: Union['TrechoOrderByInput', List['TrechoOrderByInput']]
    where: 'TrechoWhereInput'
    cursor: 'TrechoWhereUniqueInput'
    distinct: List['TrechoScalarFieldKeys']
    include: 'TrechoIncludeFromTrechoRecursive4'


class FindManyTrechoArgsFromPassagemRecursive4(TypedDict, total=False):
    """Arguments for Passagem"""
    take: int
    skip: int
    order_by: Union['TrechoOrderByInput', List['TrechoOrderByInput']]
    where: 'TrechoWhereInput'
    cursor: 'TrechoWhereUniqueInput'
    distinct: List['TrechoScalarFieldKeys']
    
    

class AssentoIncludeFromPassagem(TypedDict, total=False):
    """Relational arguments for Passagem"""
    trecho: Union[bool, 'TrechoArgsFromPassagemRecursive1']
    trechoReservados: Union[bool, 'FindManyTrechoReservadoArgsFromPassagemRecursive1']


class AssentoIncludeFromPassagemRecursive1(TypedDict, total=False):
    """Relational arguments for Passagem"""
    trecho: Union[bool, 'TrechoArgsFromPassagemRecursive2']
    trechoReservados: Union[bool, 'FindManyTrechoReservadoArgsFromPassagemRecursive2']


class AssentoIncludeFromPassagemRecursive2(TypedDict, total=False):
    """Relational arguments for Passagem"""
    trecho: Union[bool, 'TrechoArgsFromPassagemRecursive3']
    trechoReservados: Union[bool, 'FindManyTrechoReservadoArgsFromPassagemRecursive3']


class AssentoIncludeFromPassagemRecursive3(TypedDict, total=False):
    """Relational arguments for Passagem"""
    trecho: Union[bool, 'TrechoArgsFromPassagemRecursive4']
    trechoReservados: Union[bool, 'FindManyTrechoReservadoArgsFromPassagemRecursive4']


class AssentoIncludeFromPassagemRecursive4(TypedDict, total=False):
    """Relational arguments for Passagem"""

    

class AssentoArgsFromPassagem(TypedDict, total=False):
    """Arguments for Passagem"""
    include: 'AssentoIncludeFromAssentoRecursive1'


class AssentoArgsFromPassagemRecursive1(TypedDict, total=False):
    """Arguments for Passagem"""
    include: 'AssentoIncludeFromAssentoRecursive2'


class AssentoArgsFromPassagemRecursive2(TypedDict, total=False):
    """Arguments for Passagem"""
    include: 'AssentoIncludeFromAssentoRecursive3'


class AssentoArgsFromPassagemRecursive3(TypedDict, total=False):
    """Arguments for Passagem"""
    include: 'AssentoIncludeFromAssentoRecursive4'


class AssentoArgsFromPassagemRecursive4(TypedDict, total=False):
    """Arguments for Passagem"""
    
    

class FindManyAssentoArgsFromPassagem(TypedDict, total=False):
    """Arguments for Passagem"""
    take: int
    skip: int
    order_by: Union['AssentoOrderByInput', List['AssentoOrderByInput']]
    where: 'AssentoWhereInput'
    cursor: 'AssentoWhereUniqueInput'
    distinct: List['AssentoScalarFieldKeys']
    include: 'AssentoIncludeFromAssentoRecursive1'


class FindManyAssentoArgsFromPassagemRecursive1(TypedDict, total=False):
    """Arguments for Passagem"""
    take: int
    skip: int
    order_by: Union['AssentoOrderByInput', List['AssentoOrderByInput']]
    where: 'AssentoWhereInput'
    cursor: 'AssentoWhereUniqueInput'
    distinct: List['AssentoScalarFieldKeys']
    include: 'AssentoIncludeFromAssentoRecursive2'


class FindManyAssentoArgsFromPassagemRecursive2(TypedDict, total=False):
    """Arguments for Passagem"""
    take: int
    skip: int
    order_by: Union['AssentoOrderByInput', List['AssentoOrderByInput']]
    where: 'AssentoWhereInput'
    cursor: 'AssentoWhereUniqueInput'
    distinct: List['AssentoScalarFieldKeys']
    include: 'AssentoIncludeFromAssentoRecursive3'


class FindManyAssentoArgsFromPassagemRecursive3(TypedDict, total=False):
    """Arguments for Passagem"""
    take: int
    skip: int
    order_by: Union['AssentoOrderByInput', List['AssentoOrderByInput']]
    where: 'AssentoWhereInput'
    cursor: 'AssentoWhereUniqueInput'
    distinct: List['AssentoScalarFieldKeys']
    include: 'AssentoIncludeFromAssentoRecursive4'


class FindManyAssentoArgsFromPassagemRecursive4(TypedDict, total=False):
    """Arguments for Passagem"""
    take: int
    skip: int
    order_by: Union['AssentoOrderByInput', List['AssentoOrderByInput']]
    where: 'AssentoWhereInput'
    cursor: 'AssentoWhereUniqueInput'
    distinct: List['AssentoScalarFieldKeys']
    
    

class TrechoReservadoIncludeFromPassagem(TypedDict, total=False):
    """Relational arguments for Passagem"""
    passagem: Union[bool, 'PassagemArgsFromPassagemRecursive1']
    trecho: Union[bool, 'TrechoArgsFromPassagemRecursive1']
    assento: Union[bool, 'AssentoArgsFromPassagemRecursive1']


class TrechoReservadoIncludeFromPassagemRecursive1(TypedDict, total=False):
    """Relational arguments for Passagem"""
    passagem: Union[bool, 'PassagemArgsFromPassagemRecursive2']
    trecho: Union[bool, 'TrechoArgsFromPassagemRecursive2']
    assento: Union[bool, 'AssentoArgsFromPassagemRecursive2']


class TrechoReservadoIncludeFromPassagemRecursive2(TypedDict, total=False):
    """Relational arguments for Passagem"""
    passagem: Union[bool, 'PassagemArgsFromPassagemRecursive3']
    trecho: Union[bool, 'TrechoArgsFromPassagemRecursive3']
    assento: Union[bool, 'AssentoArgsFromPassagemRecursive3']


class TrechoReservadoIncludeFromPassagemRecursive3(TypedDict, total=False):
    """Relational arguments for Passagem"""
    passagem: Union[bool, 'PassagemArgsFromPassagemRecursive4']
    trecho: Union[bool, 'TrechoArgsFromPassagemRecursive4']
    assento: Union[bool, 'AssentoArgsFromPassagemRecursive4']


class TrechoReservadoIncludeFromPassagemRecursive4(TypedDict, total=False):
    """Relational arguments for Passagem"""

    

class TrechoReservadoArgsFromPassagem(TypedDict, total=False):
    """Arguments for Passagem"""
    include: 'TrechoReservadoIncludeFromTrechoReservadoRecursive1'


class TrechoReservadoArgsFromPassagemRecursive1(TypedDict, total=False):
    """Arguments for Passagem"""
    include: 'TrechoReservadoIncludeFromTrechoReservadoRecursive2'


class TrechoReservadoArgsFromPassagemRecursive2(TypedDict, total=False):
    """Arguments for Passagem"""
    include: 'TrechoReservadoIncludeFromTrechoReservadoRecursive3'


class TrechoReservadoArgsFromPassagemRecursive3(TypedDict, total=False):
    """Arguments for Passagem"""
    include: 'TrechoReservadoIncludeFromTrechoReservadoRecursive4'


class TrechoReservadoArgsFromPassagemRecursive4(TypedDict, total=False):
    """Arguments for Passagem"""
    
    

class FindManyTrechoReservadoArgsFromPassagem(TypedDict, total=False):
    """Arguments for Passagem"""
    take: int
    skip: int
    order_by: Union['TrechoReservadoOrderByInput', List['TrechoReservadoOrderByInput']]
    where: 'TrechoReservadoWhereInput'
    cursor: 'TrechoReservadoWhereUniqueInput'
    distinct: List['TrechoReservadoScalarFieldKeys']
    include: 'TrechoReservadoIncludeFromTrechoReservadoRecursive1'


class FindManyTrechoReservadoArgsFromPassagemRecursive1(TypedDict, total=False):
    """Arguments for Passagem"""
    take: int
    skip: int
    order_by: Union['TrechoReservadoOrderByInput', List['TrechoReservadoOrderByInput']]
    where: 'TrechoReservadoWhereInput'
    cursor: 'TrechoReservadoWhereUniqueInput'
    distinct: List['TrechoReservadoScalarFieldKeys']
    include: 'TrechoReservadoIncludeFromTrechoReservadoRecursive2'


class FindManyTrechoReservadoArgsFromPassagemRecursive2(TypedDict, total=False):
    """Arguments for Passagem"""
    take: int
    skip: int
    order_by: Union['TrechoReservadoOrderByInput', List['TrechoReservadoOrderByInput']]
    where: 'TrechoReservadoWhereInput'
    cursor: 'TrechoReservadoWhereUniqueInput'
    distinct: List['TrechoReservadoScalarFieldKeys']
    include: 'TrechoReservadoIncludeFromTrechoReservadoRecursive3'


class FindManyTrechoReservadoArgsFromPassagemRecursive3(TypedDict, total=False):
    """Arguments for Passagem"""
    take: int
    skip: int
    order_by: Union['TrechoReservadoOrderByInput', List['TrechoReservadoOrderByInput']]
    where: 'TrechoReservadoWhereInput'
    cursor: 'TrechoReservadoWhereUniqueInput'
    distinct: List['TrechoReservadoScalarFieldKeys']
    include: 'TrechoReservadoIncludeFromTrechoReservadoRecursive4'


class FindManyTrechoReservadoArgsFromPassagemRecursive4(TypedDict, total=False):
    """Arguments for Passagem"""
    take: int
    skip: int
    order_by: Union['TrechoReservadoOrderByInput', List['TrechoReservadoOrderByInput']]
    where: 'TrechoReservadoWhereInput'
    cursor: 'TrechoReservadoWhereUniqueInput'
    distinct: List['TrechoReservadoScalarFieldKeys']
    
    

class PassagemIncludeFromPassagem(TypedDict, total=False):
    """Relational arguments for Passagem"""
    user: Union[bool, 'UserArgsFromPassagemRecursive1']
    trechosReservados: Union[bool, 'FindManyTrechoReservadoArgsFromPassagemRecursive1']


class PassagemIncludeFromPassagemRecursive1(TypedDict, total=False):
    """Relational arguments for Passagem"""
    user: Union[bool, 'UserArgsFromPassagemRecursive2']
    trechosReservados: Union[bool, 'FindManyTrechoReservadoArgsFromPassagemRecursive2']


class PassagemIncludeFromPassagemRecursive2(TypedDict, total=False):
    """Relational arguments for Passagem"""
    user: Union[bool, 'UserArgsFromPassagemRecursive3']
    trechosReservados: Union[bool, 'FindManyTrechoReservadoArgsFromPassagemRecursive3']


class PassagemIncludeFromPassagemRecursive3(TypedDict, total=False):
    """Relational arguments for Passagem"""
    user: Union[bool, 'UserArgsFromPassagemRecursive4']
    trechosReservados: Union[bool, 'FindManyTrechoReservadoArgsFromPassagemRecursive4']


class PassagemIncludeFromPassagemRecursive4(TypedDict, total=False):
    """Relational arguments for Passagem"""

    

class PassagemArgsFromPassagem(TypedDict, total=False):
    """Arguments for Passagem"""
    include: 'PassagemIncludeFromPassagemRecursive1'


class PassagemArgsFromPassagemRecursive1(TypedDict, total=False):
    """Arguments for Passagem"""
    include: 'PassagemIncludeFromPassagemRecursive2'


class PassagemArgsFromPassagemRecursive2(TypedDict, total=False):
    """Arguments for Passagem"""
    include: 'PassagemIncludeFromPassagemRecursive3'


class PassagemArgsFromPassagemRecursive3(TypedDict, total=False):
    """Arguments for Passagem"""
    include: 'PassagemIncludeFromPassagemRecursive4'


class PassagemArgsFromPassagemRecursive4(TypedDict, total=False):
    """Arguments for Passagem"""
    
    

class FindManyPassagemArgsFromPassagem(TypedDict, total=False):
    """Arguments for Passagem"""
    take: int
    skip: int
    order_by: Union['PassagemOrderByInput', List['PassagemOrderByInput']]
    where: 'PassagemWhereInput'
    cursor: 'PassagemWhereUniqueInput'
    distinct: List['PassagemScalarFieldKeys']
    include: 'PassagemIncludeFromPassagemRecursive1'


class FindManyPassagemArgsFromPassagemRecursive1(TypedDict, total=False):
    """Arguments for Passagem"""
    take: int
    skip: int
    order_by: Union['PassagemOrderByInput', List['PassagemOrderByInput']]
    where: 'PassagemWhereInput'
    cursor: 'PassagemWhereUniqueInput'
    distinct: List['PassagemScalarFieldKeys']
    include: 'PassagemIncludeFromPassagemRecursive2'


class FindManyPassagemArgsFromPassagemRecursive2(TypedDict, total=False):
    """Arguments for Passagem"""
    take: int
    skip: int
    order_by: Union['PassagemOrderByInput', List['PassagemOrderByInput']]
    where: 'PassagemWhereInput'
    cursor: 'PassagemWhereUniqueInput'
    distinct: List['PassagemScalarFieldKeys']
    include: 'PassagemIncludeFromPassagemRecursive3'


class FindManyPassagemArgsFromPassagemRecursive3(TypedDict, total=False):
    """Arguments for Passagem"""
    take: int
    skip: int
    order_by: Union['PassagemOrderByInput', List['PassagemOrderByInput']]
    where: 'PassagemWhereInput'
    cursor: 'PassagemWhereUniqueInput'
    distinct: List['PassagemScalarFieldKeys']
    include: 'PassagemIncludeFromPassagemRecursive4'


class FindManyPassagemArgsFromPassagemRecursive4(TypedDict, total=False):
    """Arguments for Passagem"""
    take: int
    skip: int
    order_by: Union['PassagemOrderByInput', List['PassagemOrderByInput']]
    where: 'PassagemWhereInput'
    cursor: 'PassagemWhereUniqueInput'
    distinct: List['PassagemScalarFieldKeys']
    
    

class UserIncludeFromPassagem(TypedDict, total=False):
    """Relational arguments for Passagem"""
    passagens: Union[bool, 'FindManyPassagemArgsFromPassagemRecursive1']


class UserIncludeFromPassagemRecursive1(TypedDict, total=False):
    """Relational arguments for Passagem"""
    passagens: Union[bool, 'FindManyPassagemArgsFromPassagemRecursive2']


class UserIncludeFromPassagemRecursive2(TypedDict, total=False):
    """Relational arguments for Passagem"""
    passagens: Union[bool, 'FindManyPassagemArgsFromPassagemRecursive3']


class UserIncludeFromPassagemRecursive3(TypedDict, total=False):
    """Relational arguments for Passagem"""
    passagens: Union[bool, 'FindManyPassagemArgsFromPassagemRecursive4']


class UserIncludeFromPassagemRecursive4(TypedDict, total=False):
    """Relational arguments for Passagem"""

    

class UserArgsFromPassagem(TypedDict, total=False):
    """Arguments for Passagem"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromPassagemRecursive1(TypedDict, total=False):
    """Arguments for Passagem"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromPassagemRecursive2(TypedDict, total=False):
    """Arguments for Passagem"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromPassagemRecursive3(TypedDict, total=False):
    """Arguments for Passagem"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromPassagemRecursive4(TypedDict, total=False):
    """Arguments for Passagem"""
    
    

class FindManyUserArgsFromPassagem(TypedDict, total=False):
    """Arguments for Passagem"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromPassagemRecursive1(TypedDict, total=False):
    """Arguments for Passagem"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromPassagemRecursive2(TypedDict, total=False):
    """Arguments for Passagem"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromPassagemRecursive3(TypedDict, total=False):
    """Arguments for Passagem"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromPassagemRecursive4(TypedDict, total=False):
    """Arguments for Passagem"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    


FindManyPassagemArgs = FindManyPassagemArgsFromPassagem
FindFirstPassagemArgs = FindManyPassagemArgsFromPassagem


    

class PassagemWhereInput(TypedDict, total=False):
    """Passagem arguments for searching"""
    uuid: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    user_id: Union[_int, 'types.IntFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    trechosReservados: 'TrechoReservadoListRelationFilter'

    # should be noted that AND and NOT should be Union['PassagemWhereInputRecursive1', List['PassagemWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['PassagemWhereInputRecursive1']
    OR: List['PassagemWhereInputRecursive1']
    NOT: List['PassagemWhereInputRecursive1']


class PassagemWhereInputRecursive1(TypedDict, total=False):
    """Passagem arguments for searching"""
    uuid: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    user_id: Union[_int, 'types.IntFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    trechosReservados: 'TrechoReservadoListRelationFilter'

    # should be noted that AND and NOT should be Union['PassagemWhereInputRecursive2', List['PassagemWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['PassagemWhereInputRecursive2']
    OR: List['PassagemWhereInputRecursive2']
    NOT: List['PassagemWhereInputRecursive2']


class PassagemWhereInputRecursive2(TypedDict, total=False):
    """Passagem arguments for searching"""
    uuid: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    user_id: Union[_int, 'types.IntFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    trechosReservados: 'TrechoReservadoListRelationFilter'

    # should be noted that AND and NOT should be Union['PassagemWhereInputRecursive3', List['PassagemWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['PassagemWhereInputRecursive3']
    OR: List['PassagemWhereInputRecursive3']
    NOT: List['PassagemWhereInputRecursive3']


class PassagemWhereInputRecursive3(TypedDict, total=False):
    """Passagem arguments for searching"""
    uuid: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    user_id: Union[_int, 'types.IntFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    trechosReservados: 'TrechoReservadoListRelationFilter'

    # should be noted that AND and NOT should be Union['PassagemWhereInputRecursive4', List['PassagemWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['PassagemWhereInputRecursive4']
    OR: List['PassagemWhereInputRecursive4']
    NOT: List['PassagemWhereInputRecursive4']


class PassagemWhereInputRecursive4(TypedDict, total=False):
    """Passagem arguments for searching"""
    uuid: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    user_id: Union[_int, 'types.IntFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    trechosReservados: 'TrechoReservadoListRelationFilter'



# aggregate Passagem types


    

class PassagemScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Passagem arguments for searching"""
    uuid: Union[_str, 'types.StringWithAggregatesFilter']
    user_id: Union[_int, 'types.IntWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['PassagemScalarWhereWithAggregatesInputRecursive1']
    OR: List['PassagemScalarWhereWithAggregatesInputRecursive1']
    NOT: List['PassagemScalarWhereWithAggregatesInputRecursive1']


class PassagemScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Passagem arguments for searching"""
    uuid: Union[_str, 'types.StringWithAggregatesFilter']
    user_id: Union[_int, 'types.IntWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['PassagemScalarWhereWithAggregatesInputRecursive2']
    OR: List['PassagemScalarWhereWithAggregatesInputRecursive2']
    NOT: List['PassagemScalarWhereWithAggregatesInputRecursive2']


class PassagemScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Passagem arguments for searching"""
    uuid: Union[_str, 'types.StringWithAggregatesFilter']
    user_id: Union[_int, 'types.IntWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['PassagemScalarWhereWithAggregatesInputRecursive3']
    OR: List['PassagemScalarWhereWithAggregatesInputRecursive3']
    NOT: List['PassagemScalarWhereWithAggregatesInputRecursive3']


class PassagemScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Passagem arguments for searching"""
    uuid: Union[_str, 'types.StringWithAggregatesFilter']
    user_id: Union[_int, 'types.IntWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['PassagemScalarWhereWithAggregatesInputRecursive4']
    OR: List['PassagemScalarWhereWithAggregatesInputRecursive4']
    NOT: List['PassagemScalarWhereWithAggregatesInputRecursive4']


class PassagemScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Passagem arguments for searching"""
    uuid: Union[_str, 'types.StringWithAggregatesFilter']
    user_id: Union[_int, 'types.IntWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class PassagemGroupByOutput(TypedDict, total=False):
    uuid: _str
    user_id: _int
    created_at: datetime.datetime
    _sum: 'PassagemSumAggregateOutput'
    _avg: 'PassagemAvgAggregateOutput'
    _min: 'PassagemMinAggregateOutput'
    _max: 'PassagemMaxAggregateOutput'
    _count: 'PassagemCountAggregateOutput'


class PassagemAvgAggregateOutput(TypedDict, total=False):
    """Passagem output for aggregating averages"""
    user_id: float


class PassagemSumAggregateOutput(TypedDict, total=False):
    """Passagem output for aggregating sums"""
    user_id: _int


class PassagemScalarAggregateOutput(TypedDict, total=False):
    """Passagem output including scalar fields"""
    uuid: _str
    user_id: _int
    created_at: datetime.datetime


PassagemMinAggregateOutput = PassagemScalarAggregateOutput
PassagemMaxAggregateOutput = PassagemScalarAggregateOutput


class PassagemMaxAggregateInput(TypedDict, total=False):
    """Passagem input for aggregating by max"""
    uuid: bool
    user_id: bool
    created_at: bool


class PassagemMinAggregateInput(TypedDict, total=False):
    """Passagem input for aggregating by min"""
    uuid: bool
    user_id: bool
    created_at: bool


class PassagemNumberAggregateInput(TypedDict, total=False):
    """Passagem input for aggregating numbers"""
    user_id: bool


PassagemAvgAggregateInput = PassagemNumberAggregateInput
PassagemSumAggregateInput = PassagemNumberAggregateInput


PassagemCountAggregateInput = TypedDict(
    'PassagemCountAggregateInput',
    {
        'uuid': bool,
        'user_id': bool,
        'created_at': bool,
        '_all': bool,
    },
    total=False,
)

PassagemCountAggregateOutput = TypedDict(
    'PassagemCountAggregateOutput',
    {
        'uuid': int,
        'user_id': int,
        'created_at': int,
        '_all': int,
    },
    total=False,
)


PassagemKeys = Literal[
    'uuid',
    'user',
    'user_id',
    'created_at',
    'trechosReservados',
]
PassagemScalarFieldKeys = Literal[
    'uuid',
    'user_id',
    'created_at',
]
PassagemScalarFieldKeysT = TypeVar('PassagemScalarFieldKeysT', bound=PassagemScalarFieldKeys)

PassagemRelationalFieldKeys = Literal[
        'user',
        'trechosReservados',
    ]

# User types

class UserOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the User create method"""
    id: _int
    passagens: 'PassagemCreateManyNestedWithoutRelationsInput'


class UserCreateInput(UserOptionalCreateInput):
    """Required arguments to the User create method"""
    login: _str
    password: _str
    name: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class UserOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the User create method, without relations"""
    id: _int


class UserCreateWithoutRelationsInput(UserOptionalCreateWithoutRelationsInput):
    """Required arguments to the User create method, without relations"""
    login: _str
    password: _str
    name: _str

class UserConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'UserCreateWithoutRelationsInput'
    where: 'UserWhereUniqueInput'

class UserCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'UserCreateWithoutRelationsInput'
    connect: 'UserWhereUniqueInput'
    connect_or_create: 'UserConnectOrCreateWithoutRelationsInput'


class UserCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['UserCreateWithoutRelationsInput', List['UserCreateWithoutRelationsInput']]
    connect: Union['UserWhereUniqueInput', List['UserWhereUniqueInput']]
    connect_or_create: Union['UserConnectOrCreateWithoutRelationsInput', List['UserConnectOrCreateWithoutRelationsInput']]

_UserWhereUnique_id_Input = TypedDict(
    '_UserWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

_UserWhereUnique_login_Input = TypedDict(
    '_UserWhereUnique_login_Input',
    {
        'login': '_str',
    },
    total=True
)

UserWhereUniqueInput = Union[
    '_UserWhereUnique_id_Input',
    '_UserWhereUnique_login_Input',
]


class UserUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    login: _str
    password: _str
    name: _str
    passagens: 'PassagemUpdateManyWithoutRelationsInput'


class UserUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    login: _str
    password: _str
    name: _str


class UserUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['UserCreateWithoutRelationsInput']
    connect: List['UserWhereUniqueInput']
    connect_or_create: List['UserConnectOrCreateWithoutRelationsInput']
    set: List['UserWhereUniqueInput']
    disconnect: List['UserWhereUniqueInput']
    delete: List['UserWhereUniqueInput']

    # TODO
    # update: List['UserUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['UserUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['UserScalarWhereInput']
    # upsert: List['UserUpserteWithWhereUniqueWithoutRelationsInput']


class UserUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'UserCreateWithoutRelationsInput'
    connect: 'UserWhereUniqueInput'
    connect_or_create: 'UserConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'UserUpdateInput'
    # upsert: 'UserUpsertWithoutRelationsInput'


class UserUpsertInput(TypedDict):
    create: 'UserCreateInput'
    update: 'UserUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_User_id_OrderByInput = TypedDict(
    '_User_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_User_login_OrderByInput = TypedDict(
    '_User_login_OrderByInput',
    {
        'login': 'SortOrder',
    },
    total=True
)

_User_password_OrderByInput = TypedDict(
    '_User_password_OrderByInput',
    {
        'password': 'SortOrder',
    },
    total=True
)

_User_name_OrderByInput = TypedDict(
    '_User_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_User_RelevanceInner = TypedDict(
    '_User_RelevanceInner',
    {
        'fields': 'List[UserScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_User_RelevanceOrderByInput = TypedDict(
    '_User_RelevanceOrderByInput',
    {
        '_relevance': '_User_RelevanceInner',
    },
    total=True
)

UserOrderByInput = Union[
    '_User_id_OrderByInput',
    '_User_login_OrderByInput',
    '_User_password_OrderByInput',
    '_User_name_OrderByInput',
    '_User_RelevanceOrderByInput',
]



# recursive User types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

UserRelationFilter = TypedDict(
    'UserRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class UserListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class UserInclude(TypedDict, total=False):
    """User relational arguments"""
    passagens: Union[bool, 'FindManyPassagemArgsFromUser']


    

class TrechoIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    assentos: Union[bool, 'FindManyAssentoArgsFromUserRecursive1']
    trechosReservados: Union[bool, 'FindManyTrechoReservadoArgsFromUserRecursive1']


class TrechoIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    assentos: Union[bool, 'FindManyAssentoArgsFromUserRecursive2']
    trechosReservados: Union[bool, 'FindManyTrechoReservadoArgsFromUserRecursive2']


class TrechoIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    assentos: Union[bool, 'FindManyAssentoArgsFromUserRecursive3']
    trechosReservados: Union[bool, 'FindManyTrechoReservadoArgsFromUserRecursive3']


class TrechoIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    assentos: Union[bool, 'FindManyAssentoArgsFromUserRecursive4']
    trechosReservados: Union[bool, 'FindManyTrechoReservadoArgsFromUserRecursive4']


class TrechoIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class TrechoArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'TrechoIncludeFromTrechoRecursive1'


class TrechoArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'TrechoIncludeFromTrechoRecursive2'


class TrechoArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'TrechoIncludeFromTrechoRecursive3'


class TrechoArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'TrechoIncludeFromTrechoRecursive4'


class TrechoArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyTrechoArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['TrechoOrderByInput', List['TrechoOrderByInput']]
    where: 'TrechoWhereInput'
    cursor: 'TrechoWhereUniqueInput'
    distinct: List['TrechoScalarFieldKeys']
    include: 'TrechoIncludeFromTrechoRecursive1'


class FindManyTrechoArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['TrechoOrderByInput', List['TrechoOrderByInput']]
    where: 'TrechoWhereInput'
    cursor: 'TrechoWhereUniqueInput'
    distinct: List['TrechoScalarFieldKeys']
    include: 'TrechoIncludeFromTrechoRecursive2'


class FindManyTrechoArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['TrechoOrderByInput', List['TrechoOrderByInput']]
    where: 'TrechoWhereInput'
    cursor: 'TrechoWhereUniqueInput'
    distinct: List['TrechoScalarFieldKeys']
    include: 'TrechoIncludeFromTrechoRecursive3'


class FindManyTrechoArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['TrechoOrderByInput', List['TrechoOrderByInput']]
    where: 'TrechoWhereInput'
    cursor: 'TrechoWhereUniqueInput'
    distinct: List['TrechoScalarFieldKeys']
    include: 'TrechoIncludeFromTrechoRecursive4'


class FindManyTrechoArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['TrechoOrderByInput', List['TrechoOrderByInput']]
    where: 'TrechoWhereInput'
    cursor: 'TrechoWhereUniqueInput'
    distinct: List['TrechoScalarFieldKeys']
    
    

class AssentoIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    trecho: Union[bool, 'TrechoArgsFromUserRecursive1']
    trechoReservados: Union[bool, 'FindManyTrechoReservadoArgsFromUserRecursive1']


class AssentoIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    trecho: Union[bool, 'TrechoArgsFromUserRecursive2']
    trechoReservados: Union[bool, 'FindManyTrechoReservadoArgsFromUserRecursive2']


class AssentoIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    trecho: Union[bool, 'TrechoArgsFromUserRecursive3']
    trechoReservados: Union[bool, 'FindManyTrechoReservadoArgsFromUserRecursive3']


class AssentoIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    trecho: Union[bool, 'TrechoArgsFromUserRecursive4']
    trechoReservados: Union[bool, 'FindManyTrechoReservadoArgsFromUserRecursive4']


class AssentoIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class AssentoArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'AssentoIncludeFromAssentoRecursive1'


class AssentoArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'AssentoIncludeFromAssentoRecursive2'


class AssentoArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'AssentoIncludeFromAssentoRecursive3'


class AssentoArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'AssentoIncludeFromAssentoRecursive4'


class AssentoArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyAssentoArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AssentoOrderByInput', List['AssentoOrderByInput']]
    where: 'AssentoWhereInput'
    cursor: 'AssentoWhereUniqueInput'
    distinct: List['AssentoScalarFieldKeys']
    include: 'AssentoIncludeFromAssentoRecursive1'


class FindManyAssentoArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AssentoOrderByInput', List['AssentoOrderByInput']]
    where: 'AssentoWhereInput'
    cursor: 'AssentoWhereUniqueInput'
    distinct: List['AssentoScalarFieldKeys']
    include: 'AssentoIncludeFromAssentoRecursive2'


class FindManyAssentoArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AssentoOrderByInput', List['AssentoOrderByInput']]
    where: 'AssentoWhereInput'
    cursor: 'AssentoWhereUniqueInput'
    distinct: List['AssentoScalarFieldKeys']
    include: 'AssentoIncludeFromAssentoRecursive3'


class FindManyAssentoArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AssentoOrderByInput', List['AssentoOrderByInput']]
    where: 'AssentoWhereInput'
    cursor: 'AssentoWhereUniqueInput'
    distinct: List['AssentoScalarFieldKeys']
    include: 'AssentoIncludeFromAssentoRecursive4'


class FindManyAssentoArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AssentoOrderByInput', List['AssentoOrderByInput']]
    where: 'AssentoWhereInput'
    cursor: 'AssentoWhereUniqueInput'
    distinct: List['AssentoScalarFieldKeys']
    
    

class TrechoReservadoIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    passagem: Union[bool, 'PassagemArgsFromUserRecursive1']
    trecho: Union[bool, 'TrechoArgsFromUserRecursive1']
    assento: Union[bool, 'AssentoArgsFromUserRecursive1']


class TrechoReservadoIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    passagem: Union[bool, 'PassagemArgsFromUserRecursive2']
    trecho: Union[bool, 'TrechoArgsFromUserRecursive2']
    assento: Union[bool, 'AssentoArgsFromUserRecursive2']


class TrechoReservadoIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    passagem: Union[bool, 'PassagemArgsFromUserRecursive3']
    trecho: Union[bool, 'TrechoArgsFromUserRecursive3']
    assento: Union[bool, 'AssentoArgsFromUserRecursive3']


class TrechoReservadoIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    passagem: Union[bool, 'PassagemArgsFromUserRecursive4']
    trecho: Union[bool, 'TrechoArgsFromUserRecursive4']
    assento: Union[bool, 'AssentoArgsFromUserRecursive4']


class TrechoReservadoIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class TrechoReservadoArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'TrechoReservadoIncludeFromTrechoReservadoRecursive1'


class TrechoReservadoArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'TrechoReservadoIncludeFromTrechoReservadoRecursive2'


class TrechoReservadoArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'TrechoReservadoIncludeFromTrechoReservadoRecursive3'


class TrechoReservadoArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'TrechoReservadoIncludeFromTrechoReservadoRecursive4'


class TrechoReservadoArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyTrechoReservadoArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['TrechoReservadoOrderByInput', List['TrechoReservadoOrderByInput']]
    where: 'TrechoReservadoWhereInput'
    cursor: 'TrechoReservadoWhereUniqueInput'
    distinct: List['TrechoReservadoScalarFieldKeys']
    include: 'TrechoReservadoIncludeFromTrechoReservadoRecursive1'


class FindManyTrechoReservadoArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['TrechoReservadoOrderByInput', List['TrechoReservadoOrderByInput']]
    where: 'TrechoReservadoWhereInput'
    cursor: 'TrechoReservadoWhereUniqueInput'
    distinct: List['TrechoReservadoScalarFieldKeys']
    include: 'TrechoReservadoIncludeFromTrechoReservadoRecursive2'


class FindManyTrechoReservadoArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['TrechoReservadoOrderByInput', List['TrechoReservadoOrderByInput']]
    where: 'TrechoReservadoWhereInput'
    cursor: 'TrechoReservadoWhereUniqueInput'
    distinct: List['TrechoReservadoScalarFieldKeys']
    include: 'TrechoReservadoIncludeFromTrechoReservadoRecursive3'


class FindManyTrechoReservadoArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['TrechoReservadoOrderByInput', List['TrechoReservadoOrderByInput']]
    where: 'TrechoReservadoWhereInput'
    cursor: 'TrechoReservadoWhereUniqueInput'
    distinct: List['TrechoReservadoScalarFieldKeys']
    include: 'TrechoReservadoIncludeFromTrechoReservadoRecursive4'


class FindManyTrechoReservadoArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['TrechoReservadoOrderByInput', List['TrechoReservadoOrderByInput']]
    where: 'TrechoReservadoWhereInput'
    cursor: 'TrechoReservadoWhereUniqueInput'
    distinct: List['TrechoReservadoScalarFieldKeys']
    
    

class PassagemIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive1']
    trechosReservados: Union[bool, 'FindManyTrechoReservadoArgsFromUserRecursive1']


class PassagemIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive2']
    trechosReservados: Union[bool, 'FindManyTrechoReservadoArgsFromUserRecursive2']


class PassagemIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive3']
    trechosReservados: Union[bool, 'FindManyTrechoReservadoArgsFromUserRecursive3']


class PassagemIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive4']
    trechosReservados: Union[bool, 'FindManyTrechoReservadoArgsFromUserRecursive4']


class PassagemIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class PassagemArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'PassagemIncludeFromPassagemRecursive1'


class PassagemArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'PassagemIncludeFromPassagemRecursive2'


class PassagemArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'PassagemIncludeFromPassagemRecursive3'


class PassagemArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'PassagemIncludeFromPassagemRecursive4'


class PassagemArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyPassagemArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PassagemOrderByInput', List['PassagemOrderByInput']]
    where: 'PassagemWhereInput'
    cursor: 'PassagemWhereUniqueInput'
    distinct: List['PassagemScalarFieldKeys']
    include: 'PassagemIncludeFromPassagemRecursive1'


class FindManyPassagemArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PassagemOrderByInput', List['PassagemOrderByInput']]
    where: 'PassagemWhereInput'
    cursor: 'PassagemWhereUniqueInput'
    distinct: List['PassagemScalarFieldKeys']
    include: 'PassagemIncludeFromPassagemRecursive2'


class FindManyPassagemArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PassagemOrderByInput', List['PassagemOrderByInput']]
    where: 'PassagemWhereInput'
    cursor: 'PassagemWhereUniqueInput'
    distinct: List['PassagemScalarFieldKeys']
    include: 'PassagemIncludeFromPassagemRecursive3'


class FindManyPassagemArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PassagemOrderByInput', List['PassagemOrderByInput']]
    where: 'PassagemWhereInput'
    cursor: 'PassagemWhereUniqueInput'
    distinct: List['PassagemScalarFieldKeys']
    include: 'PassagemIncludeFromPassagemRecursive4'


class FindManyPassagemArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PassagemOrderByInput', List['PassagemOrderByInput']]
    where: 'PassagemWhereInput'
    cursor: 'PassagemWhereUniqueInput'
    distinct: List['PassagemScalarFieldKeys']
    
    

class UserIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    passagens: Union[bool, 'FindManyPassagemArgsFromUserRecursive1']


class UserIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    passagens: Union[bool, 'FindManyPassagemArgsFromUserRecursive2']


class UserIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    passagens: Union[bool, 'FindManyPassagemArgsFromUserRecursive3']


class UserIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    passagens: Union[bool, 'FindManyPassagemArgsFromUserRecursive4']


class UserIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class UserArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyUserArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    


FindManyUserArgs = FindManyUserArgsFromUser
FindFirstUserArgs = FindManyUserArgsFromUser


    

class UserWhereInput(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    login: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    passagens: 'PassagemListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive1', List['UserWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive1']
    OR: List['UserWhereInputRecursive1']
    NOT: List['UserWhereInputRecursive1']


class UserWhereInputRecursive1(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    login: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    passagens: 'PassagemListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive2', List['UserWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive2']
    OR: List['UserWhereInputRecursive2']
    NOT: List['UserWhereInputRecursive2']


class UserWhereInputRecursive2(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    login: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    passagens: 'PassagemListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive3', List['UserWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive3']
    OR: List['UserWhereInputRecursive3']
    NOT: List['UserWhereInputRecursive3']


class UserWhereInputRecursive3(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    login: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    passagens: 'PassagemListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive4', List['UserWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive4']
    OR: List['UserWhereInputRecursive4']
    NOT: List['UserWhereInputRecursive4']


class UserWhereInputRecursive4(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    login: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    passagens: 'PassagemListRelationFilter'



# aggregate User types


    

class UserScalarWhereWithAggregatesInput(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    login: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive1']
    OR: List['UserScalarWhereWithAggregatesInputRecursive1']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive1']


class UserScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    login: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive2']
    OR: List['UserScalarWhereWithAggregatesInputRecursive2']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive2']


class UserScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    login: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive3']
    OR: List['UserScalarWhereWithAggregatesInputRecursive3']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive3']


class UserScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    login: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive4']
    OR: List['UserScalarWhereWithAggregatesInputRecursive4']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive4']


class UserScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    login: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']



class UserGroupByOutput(TypedDict, total=False):
    id: _int
    login: _str
    password: _str
    name: _str
    _sum: 'UserSumAggregateOutput'
    _avg: 'UserAvgAggregateOutput'
    _min: 'UserMinAggregateOutput'
    _max: 'UserMaxAggregateOutput'
    _count: 'UserCountAggregateOutput'


class UserAvgAggregateOutput(TypedDict, total=False):
    """User output for aggregating averages"""
    id: float


class UserSumAggregateOutput(TypedDict, total=False):
    """User output for aggregating sums"""
    id: _int


class UserScalarAggregateOutput(TypedDict, total=False):
    """User output including scalar fields"""
    id: _int
    login: _str
    password: _str
    name: _str


UserMinAggregateOutput = UserScalarAggregateOutput
UserMaxAggregateOutput = UserScalarAggregateOutput


class UserMaxAggregateInput(TypedDict, total=False):
    """User input for aggregating by max"""
    id: bool
    login: bool
    password: bool
    name: bool


class UserMinAggregateInput(TypedDict, total=False):
    """User input for aggregating by min"""
    id: bool
    login: bool
    password: bool
    name: bool


class UserNumberAggregateInput(TypedDict, total=False):
    """User input for aggregating numbers"""
    id: bool


UserAvgAggregateInput = UserNumberAggregateInput
UserSumAggregateInput = UserNumberAggregateInput


UserCountAggregateInput = TypedDict(
    'UserCountAggregateInput',
    {
        'id': bool,
        'login': bool,
        'password': bool,
        'name': bool,
        '_all': bool,
    },
    total=False,
)

UserCountAggregateOutput = TypedDict(
    'UserCountAggregateOutput',
    {
        'id': int,
        'login': int,
        'password': int,
        'name': int,
        '_all': int,
    },
    total=False,
)


UserKeys = Literal[
    'id',
    'login',
    'password',
    'name',
    'passagens',
]
UserScalarFieldKeys = Literal[
    'id',
    'login',
    'password',
    'name',
]
UserScalarFieldKeysT = TypeVar('UserScalarFieldKeysT', bound=UserScalarFieldKeys)

UserRelationalFieldKeys = Literal[
        'passagens',
    ]



# we have to import ourselves as types can be namespaced to types
from . import types, enums, models, fields